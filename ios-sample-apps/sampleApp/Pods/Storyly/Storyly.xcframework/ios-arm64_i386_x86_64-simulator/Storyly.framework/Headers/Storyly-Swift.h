#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef STORYLY_SWIFT_H
#define STORYLY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Storyly",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class NSString;
@class UIFont;

/// This class represents a custom font in Moments Text Interactive
SWIFT_CLASS("_TtC7Storyly17MomentsCustomFont")
@interface MomentsCustomFont : NSObject
/// Initializer of the MomentsCustomFont
/// \param identifier Custom identifier of the font
///
/// \param font Custom font to use
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier font:(UIFont * _Nonnull)font OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIView;

/// This class defines the parent class of your custom Storyly Moments Views
SWIFT_CLASS_NAMED("MomentsItem")
@interface MomentsItem : NSObject
/// StorylyInit initialization
/// \param momentsView Your moments view to show in Storyly Bar
///
- (nonnull instancetype)initWithMomentsView:(UIView * _Nonnull)momentsView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This data class represents a Moments User provided by you
SWIFT_CLASS_NAMED("MomentsUser")
@interface MomentsUser : NSObject
/// userId Id of the user
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
/// avatarURL avatarURL of the user
@property (nonatomic, readonly, copy) NSString * _Nullable avatarURL;
/// username username of the user
@property (nonatomic, readonly, copy) NSString * _Nullable username;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This data class represents the preview mode of stories.
typedef SWIFT_ENUM_NAMED(NSInteger, PlayMode, "PlayMode", open) {
/// This play mode continues to play all of the remaining story groups in the StorylyView
  PlayModeDefault = 0,
/// This play mode plays all of the remaining stories of the specified story group
  PlayModeStoryGroup = 1,
/// This play mode plays only the specified story
  PlayModeStory = 2,
};

@class STRCartItem;
@class NSNumber;

/// This class represent Cart of Storyly
/// \param items List of STRCartItem objects representing the items added to the cart 
///
/// \param totalPrice A floating-point value indicating the current total price of all the items in the cart. 
///
/// \param oldTotalPrice  A floating-point value representing the old total price of all the items in the cart 
///
/// \param currency  A String value representing the currency of total prices 
///
SWIFT_CLASS_NAMED("STRCart")
@interface STRCart : NSObject
@property (nonatomic, readonly, copy) NSArray<STRCartItem *> * _Nonnull items;
@property (nonatomic, readonly) float totalPrice;
@property (nonatomic, readonly, strong) NSNumber * _Nullable oldTotalPrice;
@property (nonatomic, readonly, copy) NSString * _Nonnull currency;
- (nonnull instancetype)initWithItems:(NSArray<STRCartItem *> * _Nonnull)items totalPrice:(float)totalPrice oldTotalPrice:(NSNumber * _Nullable)oldTotalPrice currency:(NSString * _Nonnull)currency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data class that represents the result of an event. It contains the following properties
/// \param message A string that holds a message or description associated with the event result
///
SWIFT_CLASS_NAMED("STRCartEventResult")
@interface STRCartEventResult : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class STRProductItem;

/// This class represents an individual item in the shopping cart
/// \param item An list of type STRProductItem representing the product associated with this cart item 
///
/// \param quantity An integer value indicating the quantity of this item added to the cart 
///
/// \param totalPrice An integer value representing the current total price of this item 
///
/// \param oldTotalPrice An integer value representing the old total price of this item 
///
SWIFT_CLASS_NAMED("STRCartItem")
@interface STRCartItem : NSObject
@property (nonatomic, readonly, strong) STRProductItem * _Nonnull item;
@property (nonatomic, readonly) NSInteger quantity;
@property (nonatomic, readonly, strong) NSNumber * _Nullable totalPrice;
@property (nonatomic, readonly, strong) NSNumber * _Nullable oldTotalPrice;
- (nonnull instancetype)initWithItem:(STRProductItem * _Nonnull)item quantity:(NSInteger)quantity totalPrice:(NSNumber * _Nullable)totalPrice oldTotalPrice:(NSNumber * _Nullable)oldTotalPrice OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class STRProductVariant;

/// Represents the storyly product
/// \param productId Unique identifier of the product 
///
/// \param productGroupId Unique identifier of the group which the product belongs 
///
/// \param title The title or name of the product 
///
/// \param url The URL associated with the product 
///
/// \param desc The description of the product 
///
/// \param price The original price of the product 
///
/// \param salesPrice The discounted price of the product 
///
/// \param currency The currency in which the price is specified 
///
/// \param imageUrls  A list of URLs pointing to the images associated with the product 
///
/// \param variants  A list of product variants, represented by instances of the STRProductVariant class 
///
SWIFT_CLASS_NAMED("STRProductItem")
@interface STRProductItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull productId;
@property (nonatomic, readonly, copy) NSString * _Nonnull productGroupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nullable desc;
@property (nonatomic, readonly) float price;
@property (nonatomic, readonly, strong) NSNumber * _Nullable salesPrice;
@property (nonatomic, readonly, copy) NSString * _Nonnull currency;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable imageUrls;
@property (nonatomic, readonly, copy) NSArray<STRProductVariant *> * _Nullable variants;
- (nonnull instancetype)initWithProductId:(NSString * _Nonnull)productId productGroupId:(NSString * _Nonnull)productGroupId title:(NSString * _Nonnull)title url:(NSString * _Nonnull)url description:(NSString * _Nullable)description price:(float)price salesPrice:(NSNumber * _Nullable)salesPrice currency:(NSString * _Nonnull)currency imageUrls:(NSArray<NSString *> * _Nullable)imageUrls variants:(NSArray<STRProductVariant *> * _Nullable)variants OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the variant of the storyly product
/// \param name The name or label of the variant 
///
/// \param value The value or specific option associated with the variant 
///
SWIFT_CLASS_NAMED("STRProductVariant")
@interface STRProductVariant : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents the share state of story.
typedef SWIFT_ENUM_NAMED(NSInteger, ShareType, "ShareType", open) {
/// Default type of Share State. Share is disabled
  ShareTypeDisabled = 0,
/// Share link
  ShareTypeLink = 1,
/// Share screen shot
  ShareTypeScreenshot = 2,
};

@class StoryMedia;

/// This data class represents a story inside a story group.
SWIFT_CLASS_NAMED("Story")
@interface Story : NSObject
/// ID of the story
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// Title of the story
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Name of the story
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Index of the story among other stories of the story group
@property (nonatomic, readonly) NSInteger index;
/// State of the story that shows whether the story is seen or not
@property (nonatomic, readonly) BOOL seen;
/// Time of the story that user watched
@property (nonatomic, readonly) NSInteger currentTime;
/// Media content of the story
@property (nonatomic, readonly, strong) StoryMedia * _Nonnull media;
/// Story initialization
/// \param id ID of the story
///
/// \param index Index of the story among other stories of the story group
///
/// \param title Title of the story
///
/// \param seen State of the story that shows whether the story is seen or not
///
/// \param currentTime Time of the story that user watched
///
/// \param media Media content of the story
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id index:(NSInteger)index title:(NSString * _Nonnull)title name:(NSString * _Nullable)name seen:(BOOL)seen currentTime:(NSInteger)currentTime media:(StoryMedia * _Nonnull)media OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum StoryComponentType : NSInteger;

/// This parent class represents the interactive components which users are interacted with.
SWIFT_CLASS_NAMED("StoryComponent")
@interface StoryComponent : NSObject
/// Id of the interactive component
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Type of the interactive component
@property (nonatomic, readonly) enum StoryComponentType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents the Comment component.
SWIFT_CLASS_NAMED("StoryCommentComponent")
@interface StoryCommentComponent : StoryComponent
/// Comment text that the user sent
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// StoryCommentComponent initialization
/// \param id Id of the interactive component
///
/// \param text Comment text that the user sent
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
@end


/// This enum represents the type of the interactive components.
typedef SWIFT_ENUM_NAMED(NSInteger, StoryComponentType, "StoryComponentType", open) {
/// Undefined component type
  StoryComponentTypeUndefined = 0,
/// Denotes the type of the component is Quiz
  StoryComponentTypeQuiz = 1,
/// Denotes the type of the component is Poll
  StoryComponentTypePoll = 2,
/// Denotes the type of the component is Emoji
  StoryComponentTypeEmoji = 3,
/// Denotes the type of the component is Rating
  StoryComponentTypeRating = 4,
/// Denotes the type of the component is PromoCode
  StoryComponentTypePromoCode = 5,
/// Denotes the type of the component is SwipeAction
  StoryComponentTypeSwipeAction = 6,
/// Denotes the type of the component is ButtonAction
  StoryComponentTypeButtonAction = 7,
/// Denotes the type of the component is Text
  StoryComponentTypeText = 8,
/// Denotes the type of the component is Image
  StoryComponentTypeImage = 9,
/// Denotes the type of the component is Countdown
  StoryComponentTypeCountdown = 10,
/// Denotes the type of the component is ProductTag
  StoryComponentTypeProductTag = 11,
/// Denotes the type of the component is ProductCard
  StoryComponentTypeProductCard = 12,
/// Denotes the type of the component is ProductList
  StoryComponentTypeProductCatalog = 13,
/// Denotes the type of the component is Comment
  StoryComponentTypeComment = 14,
/// Denotes the type of the component is Video
  StoryComponentTypeVideo = 15,
/// Denotes the type of the component is Vod
  StoryComponentTypeVod = 16,
/// Denotes the type of the component is Link CTA
  StoryComponentTypeLinkCTA = 17,
/// Denotes the type of the component is Image Quiz
  StoryComponentTypeImageQuiz = 18,
};


/// This class does the enum to string conversion of the Story Component
SWIFT_CLASS_NAMED("StoryComponentTypeHelper")
@interface StoryComponentTypeHelper : NSObject
/// This function returns the name of the Storyly event
/// \param event Incoming Storyly event type
///
///
/// returns:
/// String event name
+ (NSString * _Nonnull)storyComponentNameWithComponentType:(enum StoryComponentType)componentType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Emoji component.
SWIFT_CLASS_NAMED("StoryEmojiComponent")
@interface StoryEmojiComponent : StoryComponent
/// List of the emojis in the component
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull emojiCodes;
/// Emoji index that the user selected
@property (nonatomic, readonly) NSInteger selectedEmojiIndex;
/// Custom payload for this emoji if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryEmojiComponent initialization
/// \param id Id of the interactive component
///
/// \param emojiCodes List of the emojis in the component
///
/// \param selectedEmojiIndex Emoji index that the user selected
///
/// \param customPayload Custom payload for this emoji if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id emojiCodes:(NSArray<NSString *> * _Nonnull)emojiCodes selectedEmojiIndex:(NSInteger)selectedEmojiIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;
enum StoryGroupType : NSInteger;

/// This class represents a story group in the StorylyView.
SWIFT_CLASS_NAMED("StoryGroup")
@interface StoryGroup : NSObject
/// ID of the story group
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// Title of the story group
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// URL of the story group icon image
@property (nonatomic, readonly, copy) NSURL * _Nullable iconUrl;
/// URLs of different the story group icon themes
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSURL *> * _Nullable thematicIconUrls;
/// URL of the story group cover image
@property (nonatomic, readonly, copy) NSURL * _Nullable coverUrl;
/// Order index of the story group
@property (nonatomic, readonly) NSInteger index;
/// State of the story group that shows whether all of the stories are seen or not
@property (nonatomic, readonly) BOOL seen;
/// List of stories in the story group
@property (nonatomic, readonly, copy) NSArray<Story *> * _Nonnull stories;
/// Pin status of the story group that shows whether group is pinned or not
@property (nonatomic, readonly) BOOL pinned;
/// Type of the story group
@property (nonatomic, readonly) enum StoryGroupType type;
/// Moments User of this group
@property (nonatomic, readonly, strong) MomentsUser * _Nullable momentsUser;
/// StoryGroup initialization
/// \param id ID of the story group
///
/// \param title Title of the story group
///
/// \param iconUrl URL of the story group icon image
///
/// \param thematicIconUrls URLs of different the story group icon themes
///
/// \param coverUrl URL of the story group cover image
///
/// \param index Order index of the story group
///
/// \param seen State of the story group that shows whether all of the stories are seen or not
///
/// \param stories List of stories in the story group
///
/// \param pinned Pin status of the story group that shows whether group is pinned or not
///
/// \param type Type of the story group
///
/// \param momentsUser Moments User of this group
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title iconUrl:(NSURL * _Nullable)iconUrl thematicIconUrls:(NSDictionary<NSString *, NSURL *> * _Nullable)thematicIconUrls coverUrl:(NSURL * _Nullable)coverUrl index:(NSInteger)index seen:(BOOL)seen stories:(NSArray<Story *> * _Nonnull)stories pinned:(BOOL)pinned type:(enum StoryGroupType)type momentsUser:(MomentsUser * _Nullable)momentsUser OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents available animations that can be set for customization.
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupAnimation, "StoryGroupAnimation", open) {
/// Disables animation
  StoryGroupAnimationDisabled = 0,
/// Default animation
  StoryGroupAnimationBorderRotation = 1,
};

@class UIColor;

/// This property allows you to change the IVoD groups seen, unseen border
/// colors and IVoD icon color
SWIFT_CLASS("_TtC7Storyly26StoryGroupIconColorStyling")
@interface StoryGroupIconColorStyling : NSObject
/// This property allows you to change the border color of the IVoD story group
/// icons which are watched by the user.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyGroupIVodIconBorderColorSeen;
/// This property allows you to change the border color of the IVoD story
/// group icons which are unwatched by the user.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyGroupIVodIconBorderColorNotSeen;
/// If any of the story group is selected as IVoD group type from dashboard,
/// a little camera will appear along with the story group icon. This
/// property allows you to change the background color of this IVoD icon
@property (nonatomic, strong) UIColor * _Nonnull storyGroupIVodIconColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents styling of story group icons
SWIFT_CLASS_NAMED("StoryGroupIconStyling")
@interface StoryGroupIconStyling : NSObject
/// Height of the story group icon
@property (nonatomic) CGFloat height;
/// Width of the story group icon
@property (nonatomic) CGFloat width;
/// Corner radius value of the story group icon
@property (nonatomic) CGFloat cornerRadius;
/// StoryGroupIconStyling initialization
/// \param height Height of the story group icon
///
/// \param width Width of the story group icon
///
/// \param cornerRadius Corner radius value of the story group icon
///
- (nonnull instancetype)initWithHeight:(CGFloat)height width:(CGFloat)width cornerRadius:(CGFloat)cornerRadius OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum represents orientation of story group list
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupListOrientation, "StoryGroupListOrientation", open) {
/// Horizontal orientation of story group list
  StoryGroupListOrientationHorizontal = 0,
/// Vertical orientation of story group list
  StoryGroupListOrientationVertical = 1,
};


/// This data class represents styling of story group list
SWIFT_CLASS_NAMED("StoryGroupListStyling")
@interface StoryGroupListStyling : NSObject
/// Orientation value of story group list
@property (nonatomic) enum StoryGroupListOrientation orientation;
/// Based on orientation horizontal orientation row count or vertical orientation colum count of story group list
@property (nonatomic) NSInteger sections;
/// Edge padding value of the first and last story groups for orientation horizontal
@property (nonatomic) CGFloat horizontalEdgePadding;
/// Edge padding value of the first and last story groups for orientation vertical
@property (nonatomic) CGFloat verticalEdgePadding;
/// Horizontal padding value between story groups
@property (nonatomic) CGFloat horizontalPaddingBetweenItems;
/// Vertical padding value between story groups
@property (nonatomic) CGFloat verticalPaddingBetweenItems;
/// StoryGroupIconStyling initialization
/// \param orientation Orientation value of story group list
///
/// \param sections Based on orientation horizontal orientation row count or vertical orientation colum count of story group list
///
/// \param horizontalEdgePadding Edge padding value of the first and last story groups for orientation horizontal
///
/// \param verticalEdgePadding Edge padding value of the first and last story groups for orientation vertical
///
/// \param horizontalPaddingBetweenItems Horizontal padding value between story groups
///
/// \param verticalPaddingBetweenItems Vertical padding value between story groups
///
- (nonnull instancetype)initWithOrientation:(enum StoryGroupListOrientation)orientation sections:(NSInteger)sections horizontalEdgePadding:(CGFloat)horizontalEdgePadding verticalEdgePadding:(CGFloat)verticalEdgePadding horizontalPaddingBetweenItems:(CGFloat)horizontalPaddingBetweenItems verticalPaddingBetweenItems:(CGFloat)verticalPaddingBetweenItems OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum represents available story group sizes that be can set for customization
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupSize, "StoryGroupSize", open) {
/// Small group size which is the samllest and does not have story group text
  StoryGroupSizeSmall = 0,
/// Large group size which is the default group size of the Storyly
  StoryGroupSizeLarge = 1,
/// Custom group size which has customizable features
  StoryGroupSizeCustom = 2,
};


/// This data class represents styling of story group texts
SWIFT_CLASS_NAMED("StoryGroupTextStyling")
@interface StoryGroupTextStyling : NSObject
/// Visibility of the story group text
@property (nonatomic) BOOL isVisible;
/// Color of the seen story group text
@property (nonatomic, strong) UIColor * _Nonnull colorSeen;
/// Color of the not seen story group text
@property (nonatomic, strong) UIColor * _Nonnull colorNotSeen;
/// Font of the story group text
@property (nonatomic, strong) UIFont * _Nullable font;
/// Number of lines of the story group text
@property (nonatomic) NSInteger lines;
/// StoryGroupTextStyling initialization
/// \param isVisible Visibility of the story group text
///
/// \param color Color of the story group text
///
/// \param font Font of the story group text
///
/// \param lines Number of lines of the story group text
///
- (nonnull instancetype)initWithIsVisible:(BOOL)isVisible colorSeen:(UIColor * _Nonnull)colorSeen colorNotSeen:(UIColor * _Nonnull)colorNotSeen font:(UIFont * _Nullable)font lines:(NSInteger)lines OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents the type of the story group.
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupType, "StoryGroupType", open) {
/// Default type for the story group type
  StoryGroupTypeDefault = 0,
/// Denotes story group type is Interactive Video on Demand
  StoryGroupTypeIVod = 1,
/// Denotes story group type is Ad
  StoryGroupTypeAd = 2,
/// Denotes story group type is Moments
  StoryGroupTypeMomentsDefault = 3,
/// Denotes story group type is Moments Block
  StoryGroupTypeMomentsBlock = 4,
};

@class NSCoder;

/// This class defines the parent class of the custom styling StoryGroupView classes
SWIFT_CLASS("_TtC7Storyly14StoryGroupView")
@interface StoryGroupView : UIView
/// This function fills the StoryGroupView components
- (void)populateViewWithStoryGroup:(StoryGroup * _Nullable)storyGroup;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This protocol defines the structure of StoryGroupViewFactory
SWIFT_PROTOCOL("_TtP7Storyly21StoryGroupViewFactory_")
@protocol StoryGroupViewFactory
/// This function is called when a new view is requested
- (StoryGroupView * _Nonnull)createView SWIFT_WARN_UNUSED_RESULT;
/// This function is called when the size of the StoryGroupView is requested
- (CGSize)getSize SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

/// This data class represents styling of story view header
SWIFT_CLASS("_TtC7Storyly18StoryHeaderStyling")
@interface StoryHeaderStyling : NSObject
/// Visibility of the story view header text
@property (nonatomic) BOOL isTextVisible;
/// Visibility of the story view header icon
@property (nonatomic) BOOL isIconVisible;
/// Visibility of the story view header close button
@property (nonatomic) BOOL isCloseButtonVisible;
/// UIImage of the story view header close button
@property (nonatomic, strong) UIImage * _Nullable closeButtonIcon;
/// UIImage of the story view header share button
@property (nonatomic, strong) UIImage * _Nullable shareButtonIcon;
/// StoryHeaderStyling initialization
/// \param isTextVisible Visibility of the story view header text
///
/// \param isIconVisible Visibility of the story view header icon
///
/// \param isCloseButtonVisible Visibility of the story view header close button
///
/// \param closeButtonIcon UIImage of the story view header close button
///
/// \param shareButtonIcon UIImage of the story view header share button
///
- (nonnull instancetype)initWithIsTextVisible:(BOOL)isTextVisible isIconVisible:(BOOL)isIconVisible isCloseButtonVisible:(BOOL)isCloseButtonVisible closeButtonIcon:(UIImage * _Nullable)closeButtonIcon shareButtonIcon:(UIImage * _Nullable)shareButtonIcon OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents the Image Quiz component.
SWIFT_CLASS_NAMED("StoryImageQuizComponent")
@interface StoryImageQuizComponent : StoryComponent
/// Title of the image quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of texts of the options if exists, otherwise list of image urls of image quiz
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable options;
/// Index of the right answer if exists
@property (nonatomic, readonly, strong) NSNumber * _Nullable rightAnswerIndex;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// Custom payload for this image quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryImageQuizComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the image quiz if exists
///
/// \param options List of texts of the options if exists, otherwise list of image urls of image quiz
///
/// \param rightAnswerIndex Index of the right answer if exists
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this image quiz if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nullable)options rightAnswerIndex:(NSNumber * _Nullable)rightAnswerIndex selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

enum StoryType : NSInteger;

/// This data class represents the media of a story.
SWIFT_CLASS_NAMED("StoryMedia")
@interface StoryMedia : NSObject
/// Type of the story
@property (nonatomic, readonly) enum StoryType type;
/// List of story components in the story
@property (nonatomic, readonly, copy) NSArray<StoryComponent *> * _Nullable storyComponentList;
/// List of action urls in the story
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable actionUrlList;
/// URL which the user has just interacted with
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// URL of the preview image of the story
@property (nonatomic, copy) NSURL * _Nullable previewUrl;
/// StoryMedia initialization
/// \param type Type of the story
///
/// \param storyComponentList List of story components in the story
///
/// \param actionUrlList List of action urls in the story
///
/// \param actionUrl URL which the user has just interacted with
///
/// \param previewUrl URL of the preview image of the story
///
- (nonnull instancetype)initWithType:(enum StoryType)type storyComponentList:(NSArray<StoryComponent *> * _Nullable)storyComponentList actionUrlList:(NSArray<NSString *> * _Nullable)actionUrlList actionUrl:(NSString * _Nullable)actionUrl previewUrl:(NSURL * _Nullable)previewUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents the Poll component.
SWIFT_CLASS_NAMED("StoryPollComponent")
@interface StoryPollComponent : StoryComponent
/// Title of the poll if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of options in the poll
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull options;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// Custom payload for this poll if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryPollComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the poll if exists
///
/// \param options List of options in the poll
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this poll if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the PromoCode component.
SWIFT_CLASS_NAMED("StoryPromoCodeComponent")
@interface StoryPromoCodeComponent : StoryComponent
/// PromoCode text that the user copied
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// StoryRatingComponent initialization
/// \param id Id of the interactive component
///
/// \param text PromoCode text that the user copied
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Quiz component.
SWIFT_CLASS_NAMED("StoryQuizComponent")
@interface StoryQuizComponent : StoryComponent
/// Title of the quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of options in the quiz
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull options;
/// Index of the right answer if exists
@property (nonatomic, readonly, strong) NSNumber * _Nullable rightAnswerIndex;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// Custom payload for this quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryQuizComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the quiz if exists
///
/// \param options List of options in the quiz
///
/// \param rightAnswerIndex Index of the right answer if exists
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this quiz if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options rightAnswerIndex:(NSNumber * _Nullable)rightAnswerIndex selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Rating component.
SWIFT_CLASS_NAMED("StoryRatingComponent")
@interface StoryRatingComponent : StoryComponent
/// Emoji code as the thumb emoji
@property (nonatomic, readonly, copy) NSString * _Nonnull emojiCode;
/// Rating value which user rated in the component
@property (nonatomic, readonly) NSInteger rating;
/// Custom payload for this rating if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryRatingComponent initialization
/// \param id Id of the interactive component
///
/// \param emojiCode Emoji code as the thumb emoji
///
/// \param rating Rating value which user rated in the component
///
/// \param customPayload Custom payload for this rating if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id emojiCode:(NSString * _Nonnull)emojiCode rating:(NSInteger)rating customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum represents the type of a story content
typedef SWIFT_ENUM_NAMED(NSInteger, StoryType, "StoryType", open) {
/// Unidentified story type
  StoryTypeUnknown = 0,
/// Denotes the type of the story is Image
  StoryTypeImage = 1,
/// Denotes the type of the story is Video
  StoryTypeVideo = 2,
/// Denotes the type of the story is Interactive Video on Demand
  StoryTypeVod = 3,
/// Denotes the type of the story is an Ad View
  StoryTypeAd = 4,
};

@class UITouch;

/// This protocol represents an ad view that can be opened between stories
SWIFT_PROTOCOL("_TtP7Storyly13StorylyAdView_")
@protocol StorylyAdView
/// Use this field to dispatch custom action clicked event
@property (nonatomic, copy) void (^ _Nullable onActionClicked)(void);
/// Implement this method to return the ad view
- (UIView * _Nonnull)getView SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return the icon url of the ad view
///
/// returns:
/// Icon URL of the ad view
- (NSURL * _Nonnull)getIcon SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return the title of the ad view
///
/// returns:
/// Title of the ad view
- (NSString * _Nonnull)getTitle SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return the data of the ad view
///
/// returns:
/// Title of the ad view
- (NSDictionary<NSString *, id> * _Nonnull)getCustomData SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to do your destroy operations
- (void)destroy;
/// Implement this method to do your loading operations
///
/// returns:
/// Duration of the ad view
- (NSInteger)load SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to pause your ad view
- (void)pause;
/// Implement this method to reset operations
- (void)reset;
/// Implement this method to resume your ad view
- (void)resume;
/// Override this method to set layers, for example CTA button
- (void)setLayersWithLayers:(NSDictionary<NSString *, UIView *> * _Nonnull)layers;
/// Override this method to enable custom clicable views
- (BOOL)checkHitWithTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


/// This protocol is used to load the ad view
SWIFT_PROTOCOL("_TtP7Storyly21StorylyAdViewListener_")
@protocol StorylyAdViewListener
/// Implement this method to do loading operations of your ad view
- (void)onLoad:(id <StorylyAdView> _Nonnull)adView;
@end


/// This protocol is used as an entrance for the ad view
SWIFT_PROTOCOL("_TtP7Storyly21StorylyAdViewProvider_")
@protocol StorylyAdViewProvider
/// Implement this method to do your operations when ad view is requested
- (void)onRequest:(id <StorylyAdViewListener> _Nonnull)adViewListener :(CGRect)frame;
@end

/// This enum represents the source of the storyly data
typedef SWIFT_ENUM_NAMED(NSInteger, StorylyDataSource, "StorylyDataSource", open) {
/// Stories in Storyly API
  StorylyDataSourceAPI = 0,
/// Stories in Storyly Moments API
  StorylyDataSourceMomentsAPI = 1,
/// Stories in local device cache
  StorylyDataSourceLocal = 2,
/// Stories with user specific data
  StorylyDataSourceUserData = 3,
/// Stories with product specific data
  StorylyDataSourceProductData = 4,
};

@class StorylyView;
@class UIViewController;
enum StorylyEvent : NSInteger;

/// This delegate  represents the class which notifies application when an event
/// occurs in StorylyView.
SWIFT_PROTOCOL_NAMED("StorylyDelegate")
@protocol StorylyDelegate
@optional
/// This function will let you know that Storyly has completed
/// its network operations and story group list has just shown to the user.
/// \param storylyView StorylyView instance in which storyly is loaded
///
/// \param storyGroupList List of story groups when storyly is loaded
///
- (void)storylyLoaded:(StorylyView * _Nonnull)storylyView storyGroupList:(NSArray<StoryGroup *> * _Nonnull)storyGroupList SWIFT_UNAVAILABLE_MSG("This function is removed in v1.18.0; please use the storylyLoaded with dataSource parameter");
/// This function will let you know that Storyly has completed
/// its network operations and story group list has just shown to the user.
/// \param storylyView StorylyView instance in which storyly is loaded
///
/// \param storyGroupList List of story groups when storyly is loaded
///
/// \param dataSource Source of the storyly data
///
- (void)storylyLoaded:(StorylyView * _Nonnull)storylyView storyGroupList:(NSArray<StoryGroup *> * _Nonnull)storyGroupList dataSource:(enum StorylyDataSource)dataSource;
/// This function will let you know that Storyly has completed
/// its network operations and had a problem while fetching your stories
/// \param storylyView StorylyView instance in which storyly is failed to load
///
/// \param errorMessage Error message of the load fail reason
///
- (void)storylyLoadFailed:(StorylyView * _Nonnull)storylyView errorMessage:(NSString * _Nonnull)errorMessage;
/// This function will notify your application in case of Swipe Up or CTA Button action.
/// \param storylyView StorylyView instance in which action is occurred
///
/// \param rootViewController RootViewController of the story view
///
/// \param story Story in which action is occurred
///
- (void)storylyActionClicked:(StorylyView * _Nonnull)storylyView rootViewController:(UIViewController * _Nonnull)rootViewController story:(Story * _Nonnull)story;
/// This function will let you know that stories are started to be presented to the users.
/// \param storylyView StorylyView instance in which stories are started to shown
///
- (void)storylyStoryPresented:(StorylyView * _Nonnull)storylyView;
/// This function will let you know that programmatic story show are failed.
/// \param storylyView StorylyView instance that event occurred
///
/// \param errorMessage Error message of the fail reason
///
- (void)storylyStoryPresentFailed:(StorylyView * _Nonnull)storylyView errorMessage:(NSString * _Nonnull)errorMessage;
/// This function will let you know that user dismissed the current story while watching it.
/// \param storylyView StorylyView instance in which the story is dismissed
///
- (void)storylyStoryDismissed:(StorylyView * _Nonnull)storylyView;
/// This function will allow you to get reactions of users from specific interactive components.
/// \param storylyView StorylyView instance in which the user interacted with a component
///
/// \param storyGroup Story group in which the user interacted with a component
///
/// \param story Story in which the user interacted with a component
///
/// \param storyComponent Interactive component that user is interacted with
///
- (void)storylyUserInteracted:(StorylyView * _Nonnull)storylyView storyGroup:(StoryGroup * _Nonnull)storyGroup story:(Story * _Nonnull)story storyComponent:(StoryComponent * _Nonnull)storyComponent;
/// This function will notify you about all Storyly events and let you to send these events to
/// specific data platforms
/// \param storylyView StorylyView instance in which the event is received
///
/// \param event Storyly event type which is received
///
/// \param storyGroup Story group in which the event is received
///
/// \param story Story in which the event is received
///
/// \param storyComponent Interactive story component if event is related with a story component
///
- (void)storylyEvent:(StorylyView * _Nonnull)storylyView event:(enum StorylyEvent)event storyGroup:(StoryGroup * _Nullable)storyGroup story:(Story * _Nullable)story storyComponent:(StoryComponent * _Nullable)storyComponent;
@end

/// This enum represents all possible events that can be sent from Storyly
typedef SWIFT_ENUM(NSInteger, StorylyEvent, open) {
/// Sent when a story group is opened by user selection, programmatical selection and deeplink
  StorylyEventStoryGroupOpened = 0,
/// Sent when a story group is opened by user selection
  StorylyEventStoryGroupUserOpened = 1,
/// Sent when a story group is opened using a deeplink
  StorylyEventStoryGroupDeepLinkOpened = 2,
/// Sent when a story group is opened programmatically
  StorylyEventStoryGroupProgrammaticallyOpened = 3,
/// Sent when a story group is completed
  StorylyEventStoryGroupCompleted = 4,
/// Sent when a user does previous swipe gesture while watching a story in a story group
  StorylyEventStoryGroupPreviousSwiped = 5,
/// Sent when a user does next swipe gesture while watching a story in a story group
  StorylyEventStoryGroupNextSwiped = 6,
/// Sent when a user dismisses or clicks the close button to close the story group
  StorylyEventStoryGroupClosed = 7,
/// Sent after a while when a user sees a story as an indicator that shows story is watched
  StorylyEventStoryImpression = 8,
/// Sent when a story is loaded
  StorylyEventStoryViewed = 9,
/// Sent after a story is finished
  StorylyEventStoryCompleted = 10,
/// Sent when a user does previous click tap while watching a story
  StorylyEventStoryPreviousClicked = 11,
/// Sent when a user does next click tap while watching a story
  StorylyEventStoryNextClicked = 12,
/// Sent when a story is paused
  StorylyEventStoryPaused = 13,
/// Sent when a story is resumed
  StorylyEventStoryResumed = 14,
/// Sent when a story share url is generated and clicked to a sharing way
  StorylyEventStoryShared = 15,
/// Sent when a user clicks to interactive CTA button or does a swipe up action
  StorylyEventStoryCTAClicked = 16,
/// Sent when a user clicks to an emoji on interactive emoji list
  StorylyEventStoryEmojiClicked = 17,
/// Sent when a user answers a poll
  StorylyEventStoryPollAnswered = 18,
/// Sent when a user answers a quiz
  StorylyEventStoryQuizAnswered = 19,
/// Sent when a user answers a image quiz
  StorylyEventStoryImageQuizAnswered = 20,
/// Sent when a user adds reminder to a interactive countdown component
  StorylyEventStoryCountdownReminderAdded = 21,
/// Sent when a user removes the reminder from a interactive countdown component
  StorylyEventStoryCountdownReminderRemoved = 22,
/// Sent when a user rates in interactive rating component
  StorylyEventStoryRated = 23,
/// Sent when a user sees an interactive component
  StorylyEventStoryInteractiveImpression = 24,
/// Sent when a user clikcs a product tag point
  StorylyEventStoryProductTagExpanded = 25,
/// Sent when a user clicks a product expanded area
  StorylyEventStoryProductTagClicked = 26,
/// Sent when a user clicks a product card area
  StorylyEventStoryProductCardClicked = 27,
/// Sent when a user copy a promo code
  StorylyEventStoryPromoCodeCopied = 28,
/// Sent when a user sends a comment
  StorylyEventStoryCommentSent = 29,
/// Sent when a user opens input area
  StorylyEventStoryCommentInputOpened = 30,
/// Sent when a user closes input area
  StorylyEventStoryCommentInputClosed = 31,
/// Sent when a user clicks replay button in interactive video on demand story
  StorylyEventStorylyIVodReplayButtonClicked = 32,
/// Sent when a user seeks the video in interactive video on demand story
  StorylyEventStorylyIVodSeeked = 33,
/// Sent when a user likes a Moments story
  StorylyEventStoryLiked = 34,
/// Sent when a user unlikes a Moments story
  StorylyEventStoryUnliked = 35,
/// Sent when a product added
  StorylyEventStoryProductAdded = 36,
/// Sent when a product updated
  StorylyEventStoryProductUpdated = 37,
/// Sent when product removed
  StorylyEventStoryProductRemoved = 38,
/// Sent when checkout button clicked
  StorylyEventStoryCheckoutButtonClicked = 39,
/// Sent when cart button clicked from success sheet
  StorylyEventStoryCartButtonClicked = 40,
/// Sent when cart view clicked
  StorylyEventStoryCartViewClicked = 41,
/// Sent  when product catalog is clicked
  StorylyEventStoryProductCatalogClicked = 42,
/// Sent  when product selected
  StorylyEventStoryProductSelected = 43,
};


/// This class does the enum to string conversion of the Storyly events
SWIFT_CLASS("_TtC7Storyly18StorylyEventHelper")
@interface StorylyEventHelper : NSObject
/// This function returns the name of the Storyly event
/// \param event Incoming Storyly event type
///
///
/// returns:
/// String event name
+ (NSString * _Nonnull)storylyEventNameWithEvent:(enum StorylyEvent)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class StorylySegmentation;

/// This class triggers initialization of Storyly
SWIFT_CLASS_NAMED("StorylyInit")
@interface StorylyInit : NSObject
@property (nonatomic) BOOL isProductFallbackEnabled;
@property (nonatomic) BOOL isProductCartEnabled;
/// storylyPayload information to get moments groups for the user
@property (nonatomic, copy) NSString * _Nullable storylyPayload;
/// StorylySegmentation instance to target story groups for the user
@property (nonatomic, strong) StorylySegmentation * _Nonnull segmentation;
/// User specific information to fill the story/story group data
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull userData;
/// StorylyInit initialization
/// \param storylyId Instance token from Storyly dashboard
///
- (nonnull instancetype)initWithStorylyId:(NSString * _Nonnull)storylyId OBJC_DESIGNATED_INITIALIZER;
/// StorylyInit initialization
/// \param storylyId Instance token from Storyly dashboard
///
/// \param segmentation StorylySegmentation instance to target story groups for the user
///
/// \param customParameter Custom parameter for analytical purposes
///
/// \param isTestMode IsTestMode defines whether it is a test device or not. If true, test groups are sent from the server.
///
/// \param storylyPayload User payload to use for Moments by Storyly
///
/// \param userData User specific information to fill the story/story group data
///
- (nonnull instancetype)initWithStorylyId:(NSString * _Nonnull)storylyId segmentation:(StorylySegmentation * _Nonnull)segmentation customParameter:(NSString * _Nullable)customParameter isTestMode:(BOOL)isTestMode storylyPayload:(NSString * _Nullable)storylyPayload userData:(NSDictionary<NSString *, NSString *> * _Nonnull)userData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents available layout direction that be can set for customization
typedef SWIFT_ENUM_NAMED(NSInteger, StorylyLayoutDirection, "StorylyLayoutDirection", open) {
/// Left-to-right layout direction
  StorylyLayoutDirectionLTR = 0,
/// Right-to-left layout direction
  StorylyLayoutDirectionRTL = 1,
};


/// This protocol represents a loading view that you can inherit to
/// customize the loading view of stories
SWIFT_PROTOCOL("_TtP7Storyly18StorylyLoadingView_")
@protocol StorylyLoadingView
/// Implement this method to return the loading view
- (UIView * _Nonnull)getView SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to include your show actions
- (void)show;
/// Implement this method to include your hide actions
- (void)hide;
@end


/// This delegate represents the class which notifies application when an event
/// occurs in Storyly Moments.
SWIFT_PROTOCOL("_TtP7Storyly22StorylyMomentsDelegate_")
@protocol StorylyMomentsDelegate
@optional
/// This function will let you know that a user clicked header icon of a Storyly Moments story
/// \param storylyView StorylyView instance in which storyly is loaded
///
/// \param storyGroup Story group in which the user clicked the icon
///
/// \param story Story in which the user user clicked the icon
///
- (void)storyHeaderClicked:(StorylyView * _Nonnull)storylyView storyGroup:(StoryGroup * _Nullable)storyGroup story:(Story * _Nullable)story;
@end


SWIFT_CLASS_NAMED("StorylyMomentsIconStyling")
@interface StorylyMomentsIconStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Builder")
@interface StorylyMomentsIconStylingBuilder : NSObject
/// Sets custom image to like icon. Max size of corresponding view is 20x20px.
/// Scale type of the view is ContentMode.scaleAspectFit.
- (StorylyMomentsIconStylingBuilder * _Nonnull)setStoryLikeIconWithLikeIcon:(UIImage * _Nullable)likeIcon unlikeIcon:(UIImage * _Nullable)unlikeIcon SWIFT_WARN_UNUSED_RESULT;
/// Sets custom image to like animation icon.
/// Scale type of the view is ContentMode.scaleAspectFit.
- (StorylyMomentsIconStylingBuilder * _Nonnull)setStoryLikeAnimationIconWithIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
/// Sets custom image to view count icon. Max size of corresponding view is 20x20px.
/// Scale type of the view is ContentMode.scaleAspectFit.
- (StorylyMomentsIconStylingBuilder * _Nonnull)setStoryViewCountIconWithIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
/// Sets custom image to story options icon. Max size of corresponding view is 32x32px.
/// Scale type of the view is ContentMode.scaleAspectFit.
- (StorylyMomentsIconStylingBuilder * _Nonnull)setStoryOptionsIconWithIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
- (StorylyMomentsIconStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class holds the config properties of Moments Link CTA Interactive
SWIFT_CLASS_NAMED("StorylyMomentsLinkCTAStyling")
@interface StorylyMomentsLinkCTAStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class of StorylyMomentsLinkCTAStyling
SWIFT_CLASS_NAMED("Builder")
@interface StorylyMomentsLinkCTAStylingBuilder : NSObject
/// This function allows you to change the link text color of the Moments Link CTA view
/// \param color Color to set
///
///
/// returns:
/// StorylyMomentsLinkCTAStyling instance
- (StorylyMomentsLinkCTAStylingBuilder * _Nonnull)setLinkTextColorWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// This function builds StorylyMomentsLinkCTAStyling with the current properties
///
/// returns:
/// StorylyMomentsLinkCTAStyling instance
- (StorylyMomentsLinkCTAStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class holds the config properties of Moments Text Interactive
SWIFT_CLASS_NAMED("StorylyMomentsTextStyling")
@interface StorylyMomentsTextStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class of MomentsTextConfigBuilder
SWIFT_CLASS_NAMED("Builder")
@interface StorylyMomentsTextStylingBuilder : NSObject
/// This function allows you to set different fonts that your users will be able to select in text interactive
/// \param fonts Fonts to show to your users while creating a text interactive
///
///
/// returns:
/// Current builder
- (StorylyMomentsTextStylingBuilder * _Nonnull)setCustomFontsWithFonts:(NSArray<MomentsCustomFont *> * _Nonnull)fonts SWIFT_WARN_UNUSED_RESULT;
/// This function builds StorylyMomentsTextStyling with the current properties
///
/// returns:
/// StorylyMomentsTextStyling instance
- (StorylyMomentsTextStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("StorylyMomentsTheme")
@interface StorylyMomentsTheme : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Builder")
@interface StorylyMomentsThemeBuilder : NSObject
/// This function allows you to set custom icons to Moments
/// \param iconStyling StorylyMomentsIconStyling instance to set 
///
- (StorylyMomentsThemeBuilder * _Nonnull)setIconStylingWithIconStyling:(StorylyMomentsIconStyling * _Nonnull)iconStyling SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to customize Link CTA view
/// \param linkCTAStyling StorylyMomentsLinkCTAStyling instance to set 
///
- (StorylyMomentsThemeBuilder * _Nonnull)setLinkCtaStylingWithLinkCTAStyling:(StorylyMomentsLinkCTAStyling * _Nonnull)linkCTAStyling SWIFT_WARN_UNUSED_RESULT;
- (StorylyMomentsThemeBuilder * _Nonnull)setTextStylingWithTextStyling:(StorylyMomentsTextStyling * _Nonnull)textStyling SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to see the Moments story view count,like count and avatars of the last 3 liked users
/// It is true by default.
/// \param isVisible Show moments statistics if set to true 
///
- (StorylyMomentsThemeBuilder * _Nonnull)setMomentsUserAnalyticsVisibilityWithIsVisible:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
- (StorylyMomentsTheme * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This delegate  represents the class which notifies application when an product related event
/// occurs in StorylyView.
SWIFT_PROTOCOL_NAMED("StorylyProductDelegate")
@protocol StorylyProductDelegate
@optional
/// This function will notify you to get ids of products
/// \param storylyView StorylyView instance in which the user interacted with a component
///
/// \param productIds Found product ids in stories
///
- (void)storylyHydration:(StorylyView * _Nonnull)storylyView productIds:(NSArray<NSString *> * _Nonnull)productIds;
/// This function will notify you about all Storyly events and let you to send these events to
/// specific data platforms
/// \param storylyView StorylyView instance in which the event is received
///
/// \param event Storyly event type which is received
///
- (void)storylyEvent:(StorylyView * _Nonnull)storylyView event:(enum StorylyEvent)event;
/// This function will notify you about updates the cart in a StorylyView component
/// \param storylyView StorylyView instance in which the event is received
///
/// \param event Storyly event type which is received
///
/// \param cart Contains information about the items in the cart
///
/// \param change Represents the item being changed in the cart.
///
/// \param onSuccess It represents a callback function that will be executed if the “update cart” operation is successful
///
/// \param onFail It represents a callback function that will be executed if the “update cart” operation fails
///
- (void)storylyUpdateCartEventWithStorylyView:(StorylyView * _Nonnull)storylyView event:(enum StorylyEvent)event cart:(STRCart * _Nullable)cart change:(STRCartItem * _Nullable)change onSuccess:(void (^ _Nullable)(STRCart * _Nonnull))onSuccess onFail:(void (^ _Nullable)(STRCartEventResult * _Nonnull))onFail;
@end


/// This class is used in Storyly initialization if you are planning to target
/// labeled story groups which are set in dashboard
SWIFT_CLASS_NAMED("StorylySegmentation")
@interface StorylySegmentation : NSObject
/// StorylySegmentation initialization
/// \param segments Label set to target story groups
///
- (nonnull instancetype)initWithSegments:(NSSet<NSString *> * _Nullable)segments OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class is the main view of Storyly.
SWIFT_CLASS_NAMED("StorylyView")
@interface StorylyView : UIView
/// This property triggers StorylyView initialization
@property (nonatomic, strong) StorylyInit * _Nonnull storylyInit;
/// RootviewController of the StorylyView
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
/// Delegate of the StorylyView which will notify you when an event occurs in StorylyView.
@property (nonatomic, weak) id <StorylyDelegate> _Nullable delegate;
/// Delegate of the StorylyView which will notify you when an product related event occurs in StorylyView.
@property (nonatomic, weak) id <StorylyProductDelegate> _Nullable productDelegate;
/// Delegate of the StorylyMoments which will notify you when an event occurs in StorylyMoments.
@property (nonatomic, weak) id <StorylyMomentsDelegate> _Nullable momentsDelegate;
/// This property will allow you to add ad view between stories
@property (nonatomic, weak) id <StorylyAdViewProvider> _Nullable storylyAdViewProvider;
/// This property will allow you to add custom loading view
@property (nonatomic, weak) id <StorylyLoadingView> _Nullable storylyLoadingView;
/// This property will allow you to add custom story group view
@property (nonatomic, weak) id <StoryGroupViewFactory> _Nullable storyGroupViewFactory;
/// This property will allow you to customize share url
@property (nonatomic, copy) NSString * _Nullable storylyShareUrl;
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable accessibilityIdentifier;
/// This property allows you to change the border color of the story group
/// icons which are watched by the user.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyGroupIconBorderColorSeen;
/// This property allows you to change the border color of the story
/// group icons which are unwatched by the user.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyGroupIconBorderColorNotSeen;
/// This property allows you to change the background color of the story group icon
/// which is shown to the user as skeleton view till the stories are loaded
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupIconBackgroundColor;
/// This property allows you to change the text color of the story group
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupTextColorSeen;
/// This property allows you to change the text color of the story group
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupTextColorNotSeen;
/// This property allows you to change the font of the story group text
@property (nonatomic, strong) UIFont * _Nonnull storyGroupTextFont;
/// This property allows you to change the number of lines of the story group text
@property (nonatomic) IBInspectable NSInteger storyGroupTextLines;
/// If any of the story group is selected as pinned group from dashboard,
/// a little star icon will appear along with the story group icon. This
/// property allows you to change the background color of this pin icon
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupPinIconColor;
/// This property allows you to change the header icon border color of the story view
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyItemIconBorderColor;
/// This property allows you to change the header text color of the story view
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyItemTextColor;
/// This property allows you to change the font of the story view header text
@property (nonatomic, strong) UIFont * _Nonnull storyItemTextFont;
/// This function allows you to change the typeface of the font on the interactives
@property (nonatomic, strong) UIFont * _Nonnull storyInteractiveFont;
/// This property allows you to change the progress bar colors of the story view.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storylyItemProgressBarColor;
/// This property allows you to change the size of the story group
@property (nonatomic, copy) IBInspectable NSString * _Nonnull storyGroupSize;
/// This property allows you to change the animation of the story group
@property (nonatomic, copy) IBInspectable NSString * _Nonnull storyGroupAnimation;
/// This property allows you to change height of the story group icon
/// seealso:
/// StoryGroupIconStyling
@property (nonatomic) IBInspectable CGFloat storyGroupIconHeight;
/// This property allows you to change width of the story group icon
/// seealso:
/// StoryGroupIconStyling
@property (nonatomic) IBInspectable CGFloat storyGroupIconWidth;
/// This property allows you to change corner radius value of the story group icon
/// seealso:
/// StoryGroupIconStyling
@property (nonatomic) IBInspectable CGFloat storyGroupIconCornerRadius;
/// This property allows you to change the visibility of the story group text
/// seealso:
/// StoryGroupTextStyling
@property (nonatomic) IBInspectable BOOL storyGroupTextIsVisible;
/// This property allows you to change the visibility of the story view header text
/// seealso:
/// StoryHeaderStyling
@property (nonatomic) IBInspectable BOOL storyHeaderTextIsVisible;
/// This property allows you to change the visibility of the story view header icon
/// seealso:
/// StoryHeaderStyling
@property (nonatomic) IBInspectable BOOL storyHeaderIconIsVisible;
/// This property allows you to change the visibility of the story view header close button
/// seealso:
/// StoryHeaderStyling
@property (nonatomic) IBInspectable BOOL storyHeaderCloseButtonIsVisible;
/// This property allows you to change the UIImage of the story view header close button icon
/// seealso:
/// StoryHeaderStyling
@property (nonatomic, strong) IBInspectable UIImage * _Nullable storyHeaderCloseButtonIcon;
/// This property allows you to change the UIImage of the story view header share button icon
/// seealso:
/// StoryHeaderStyling
@property (nonatomic, strong) IBInspectable UIImage * _Nullable storyHeaderShareButtonIcon;
/// This property allows you to change the orientation of story groups list
/// seealso:
/// StoryGroupListStyling
@property (nonatomic, copy) IBInspectable NSString * _Nonnull storyGroupListOrientation;
/// This property allows you to change the orientation of story groups list
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable NSInteger storyGroupListSections;
/// This property allows you to change the horizontal padding value between story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable CGFloat storyGroupListHorizontalPaddingBetweenItems;
/// This property allows you to change the vertical padding value between story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable CGFloat storyGroupListVerticalPaddingBetweenItems;
/// This property allows you to change the horizontal edge padding value of the
/// first and last story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable CGFloat storyGroupListHorizontalEdgePadding;
/// This property allows you to change the vertical edge padding value of the
/// first and last story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable CGFloat storyGroupListVerticalEdgePadding;
/// This property allows you to change the shape of the story group icons,
/// their corners and the distance between each other if you set your story
/// group size as custom
/// seealso:
/// StoryGroupIconStyling
@property (nonatomic, strong) StoryGroupIconStyling * _Nonnull storyGroupIconStyling;
/// This property allows you to change the visibility of story group text
/// seealso:
/// StoryGroupTextStyling
@property (nonatomic, strong) StoryGroupTextStyling * _Nonnull storyGroupTextStyling;
/// This property allows you to change the visibility of story view header
/// icon and text.
/// seealso:
/// StoryHeaderStyling
@property (nonatomic, strong) StoryHeaderStyling * _Nonnull storyHeaderStyling;
/// This property allows you to change the distance between the
/// story groups and edge paddings of the first and last story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic, strong) StoryGroupListStyling * _Nonnull storyGroupListStyling;
/// This property allows you to change the IVoD groups seen, unseen border
/// colors and IVoD icon color
/// seealso:
/// StoryGroupListStyling
@property (nonatomic, strong) StoryGroupIconColorStyling * _Nonnull storyGroupIconColorStyling;
/// This property allows you to change the layout direction
@property (nonatomic) enum StorylyLayoutDirection storylyLayoutDirection;
/// If any of the story group is selected as Ivod group type from dashboard,
/// a little camera will appear along with the story group icon. This
/// property allows you to change the background color of this Ivod icon
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupIVodIconColor;
/// This property allows you to use different story groups images for different labels
@property (nonatomic, copy) IBInspectable NSString * _Nonnull storyGroupIconImageThematicLabel;
/// This property allows you to change the language shown in storyly elements.
/// Current supported langeuages are: TR, ES, RU, DE, FR, EN
@property (nonatomic, copy) IBInspectable NSString * _Nonnull languageCode;
/// This property allows you to add custom moments view to the
/// beginning of the storyly bar such as ‘add your story’ or ‘user’s own stories’
@property (nonatomic, copy) NSArray<MomentsItem *> * _Nullable momentsItems;
/// This property allows you to set moments theme to costumize moments views
@property (nonatomic, strong) StorylyMomentsTheme * _Nullable momentsTheme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class UIWindow;

@interface StorylyView (SWIFT_EXTENSION(Storyly))
/// This function allows you to load Storyly when it moves to the current window
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
@end



@interface StorylyView (SWIFT_EXTENSION(Storyly))
/// This function  allows you to refetch the data from network
/// By default you do not need to use this function.
- (void)refresh;
/// This function allows you to open using deeplink uri.
/// \param payload Intent data which includes storyly as host
///
///
/// returns:
/// Success of the operation
- (BOOL)openStoryWithPayload:(NSURL * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to pause the current story
- (void)pause;
/// This function allows you to resume the current story
- (void)resume;
/// This function allows you to dismiss story view.
/// \param animation Dismiss animation can be customized using this parameter
///
/// \param completion Actions to do after dismiss
///
- (void)dismissWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// This function allows you to open the story view.
/// \param animation Opening animation can be customized using this parameter
///
/// \param completion Actions to do after present
///
- (void)presentWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// This function allows you to open your custom external view
/// \param externalActionView External view to show
///
- (void)showExternalActionViewWithExternalActionView:(UIView * _Nonnull)externalActionView;
/// This function dismisses your already open external view
- (void)dismissExternalActionView;
/// This function allows you to specify data of custom template groups (For Objective-C version)
/// \param externalData key/value mappings to match and fill template data
///
///
/// returns:
/// Success of the operation
- (BOOL)setExternalData:(NSArray<NSDictionary *> * _Nonnull)externalData SWIFT_WARN_UNUSED_RESULT;
@end



















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef STORYLY_SWIFT_H
#define STORYLY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Storyly",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class NSString;
@class UIFont;

/// This class represents a custom font in Moments Text Interactive
SWIFT_CLASS("_TtC7Storyly17MomentsCustomFont")
@interface MomentsCustomFont : NSObject
/// Initializer of the MomentsCustomFont
/// \param identifier Custom identifier of the font
///
/// \param font Custom font to use
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier font:(UIFont * _Nonnull)font OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIView;

/// This class defines the parent class of your custom Storyly Moments Views
SWIFT_CLASS_NAMED("MomentsItem")
@interface MomentsItem : NSObject
/// StorylyInit initialization
/// \param momentsView Your moments view to show in Storyly Bar
///
- (nonnull instancetype)initWithMomentsView:(UIView * _Nonnull)momentsView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This data class represents a Moments User provided by you
SWIFT_CLASS_NAMED("MomentsUser")
@interface MomentsUser : NSObject
/// userId Id of the user
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
/// avatarURL avatarURL of the user
@property (nonatomic, readonly, copy) NSString * _Nullable avatarURL;
/// username username of the user
@property (nonatomic, readonly, copy) NSString * _Nullable username;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This data class represents the preview mode of stories.
typedef SWIFT_ENUM_NAMED(NSInteger, PlayMode, "PlayMode", open) {
/// This play mode continues to play all of the remaining story groups in the StorylyView
  PlayModeDefault = 0,
/// This play mode plays all of the remaining stories of the specified story group
  PlayModeStoryGroup = 1,
/// This play mode plays only the specified story
  PlayModeStory = 2,
};

@class STRCartItem;
@class NSNumber;

/// This class represent Cart of Storyly
/// \param items List of STRCartItem objects representing the items added to the cart 
///
/// \param totalPrice A floating-point value indicating the current total price of all the items in the cart. 
///
/// \param oldTotalPrice  A floating-point value representing the old total price of all the items in the cart 
///
/// \param currency  A String value representing the currency of total prices 
///
SWIFT_CLASS_NAMED("STRCart")
@interface STRCart : NSObject
@property (nonatomic, readonly, copy) NSArray<STRCartItem *> * _Nonnull items;
@property (nonatomic, readonly) float totalPrice;
@property (nonatomic, readonly, strong) NSNumber * _Nullable oldTotalPrice;
@property (nonatomic, readonly, copy) NSString * _Nonnull currency;
- (nonnull instancetype)initWithItems:(NSArray<STRCartItem *> * _Nonnull)items totalPrice:(float)totalPrice oldTotalPrice:(NSNumber * _Nullable)oldTotalPrice currency:(NSString * _Nonnull)currency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data class that represents the result of an event. It contains the following properties
/// \param message A string that holds a message or description associated with the event result
///
SWIFT_CLASS_NAMED("STRCartEventResult")
@interface STRCartEventResult : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class STRProductItem;

/// This class represents an individual item in the shopping cart
/// \param item An list of type STRProductItem representing the product associated with this cart item 
///
/// \param quantity An integer value indicating the quantity of this item added to the cart 
///
/// \param totalPrice An integer value representing the current total price of this item 
///
/// \param oldTotalPrice An integer value representing the old total price of this item 
///
SWIFT_CLASS_NAMED("STRCartItem")
@interface STRCartItem : NSObject
@property (nonatomic, readonly, strong) STRProductItem * _Nonnull item;
@property (nonatomic, readonly) NSInteger quantity;
@property (nonatomic, readonly, strong) NSNumber * _Nullable totalPrice;
@property (nonatomic, readonly, strong) NSNumber * _Nullable oldTotalPrice;
- (nonnull instancetype)initWithItem:(STRProductItem * _Nonnull)item quantity:(NSInteger)quantity totalPrice:(NSNumber * _Nullable)totalPrice oldTotalPrice:(NSNumber * _Nullable)oldTotalPrice OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class STRProductVariant;

/// Represents the storyly product
/// \param productId Unique identifier of the product 
///
/// \param productGroupId Unique identifier of the group which the product belongs 
///
/// \param title The title or name of the product 
///
/// \param url The URL associated with the product 
///
/// \param desc The description of the product 
///
/// \param price The original price of the product 
///
/// \param salesPrice The discounted price of the product 
///
/// \param currency The currency in which the price is specified 
///
/// \param imageUrls  A list of URLs pointing to the images associated with the product 
///
/// \param variants  A list of product variants, represented by instances of the STRProductVariant class 
///
SWIFT_CLASS_NAMED("STRProductItem")
@interface STRProductItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull productId;
@property (nonatomic, readonly, copy) NSString * _Nonnull productGroupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nullable desc;
@property (nonatomic, readonly) float price;
@property (nonatomic, readonly, strong) NSNumber * _Nullable salesPrice;
@property (nonatomic, readonly, copy) NSString * _Nonnull currency;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable imageUrls;
@property (nonatomic, readonly, copy) NSArray<STRProductVariant *> * _Nullable variants;
- (nonnull instancetype)initWithProductId:(NSString * _Nonnull)productId productGroupId:(NSString * _Nonnull)productGroupId title:(NSString * _Nonnull)title url:(NSString * _Nonnull)url description:(NSString * _Nullable)description price:(float)price salesPrice:(NSNumber * _Nullable)salesPrice currency:(NSString * _Nonnull)currency imageUrls:(NSArray<NSString *> * _Nullable)imageUrls variants:(NSArray<STRProductVariant *> * _Nullable)variants OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the variant of the storyly product
/// \param name The name or label of the variant 
///
/// \param value The value or specific option associated with the variant 
///
SWIFT_CLASS_NAMED("STRProductVariant")
@interface STRProductVariant : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents the share state of story.
typedef SWIFT_ENUM_NAMED(NSInteger, ShareType, "ShareType", open) {
/// Default type of Share State. Share is disabled
  ShareTypeDisabled = 0,
/// Share link
  ShareTypeLink = 1,
/// Share screen shot
  ShareTypeScreenshot = 2,
};

@class StoryMedia;

/// This data class represents a story inside a story group.
SWIFT_CLASS_NAMED("Story")
@interface Story : NSObject
/// ID of the story
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// Title of the story
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Name of the story
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Index of the story among other stories of the story group
@property (nonatomic, readonly) NSInteger index;
/// State of the story that shows whether the story is seen or not
@property (nonatomic, readonly) BOOL seen;
/// Time of the story that user watched
@property (nonatomic, readonly) NSInteger currentTime;
/// Media content of the story
@property (nonatomic, readonly, strong) StoryMedia * _Nonnull media;
/// Story initialization
/// \param id ID of the story
///
/// \param index Index of the story among other stories of the story group
///
/// \param title Title of the story
///
/// \param seen State of the story that shows whether the story is seen or not
///
/// \param currentTime Time of the story that user watched
///
/// \param media Media content of the story
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id index:(NSInteger)index title:(NSString * _Nonnull)title name:(NSString * _Nullable)name seen:(BOOL)seen currentTime:(NSInteger)currentTime media:(StoryMedia * _Nonnull)media OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum StoryComponentType : NSInteger;

/// This parent class represents the interactive components which users are interacted with.
SWIFT_CLASS_NAMED("StoryComponent")
@interface StoryComponent : NSObject
/// Id of the interactive component
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Type of the interactive component
@property (nonatomic, readonly) enum StoryComponentType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents the Comment component.
SWIFT_CLASS_NAMED("StoryCommentComponent")
@interface StoryCommentComponent : StoryComponent
/// Comment text that the user sent
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// StoryCommentComponent initialization
/// \param id Id of the interactive component
///
/// \param text Comment text that the user sent
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
@end


/// This enum represents the type of the interactive components.
typedef SWIFT_ENUM_NAMED(NSInteger, StoryComponentType, "StoryComponentType", open) {
/// Undefined component type
  StoryComponentTypeUndefined = 0,
/// Denotes the type of the component is Quiz
  StoryComponentTypeQuiz = 1,
/// Denotes the type of the component is Poll
  StoryComponentTypePoll = 2,
/// Denotes the type of the component is Emoji
  StoryComponentTypeEmoji = 3,
/// Denotes the type of the component is Rating
  StoryComponentTypeRating = 4,
/// Denotes the type of the component is PromoCode
  StoryComponentTypePromoCode = 5,
/// Denotes the type of the component is SwipeAction
  StoryComponentTypeSwipeAction = 6,
/// Denotes the type of the component is ButtonAction
  StoryComponentTypeButtonAction = 7,
/// Denotes the type of the component is Text
  StoryComponentTypeText = 8,
/// Denotes the type of the component is Image
  StoryComponentTypeImage = 9,
/// Denotes the type of the component is Countdown
  StoryComponentTypeCountdown = 10,
/// Denotes the type of the component is ProductTag
  StoryComponentTypeProductTag = 11,
/// Denotes the type of the component is ProductCard
  StoryComponentTypeProductCard = 12,
/// Denotes the type of the component is ProductList
  StoryComponentTypeProductCatalog = 13,
/// Denotes the type of the component is Comment
  StoryComponentTypeComment = 14,
/// Denotes the type of the component is Video
  StoryComponentTypeVideo = 15,
/// Denotes the type of the component is Vod
  StoryComponentTypeVod = 16,
/// Denotes the type of the component is Link CTA
  StoryComponentTypeLinkCTA = 17,
/// Denotes the type of the component is Image Quiz
  StoryComponentTypeImageQuiz = 18,
};


/// This class does the enum to string conversion of the Story Component
SWIFT_CLASS_NAMED("StoryComponentTypeHelper")
@interface StoryComponentTypeHelper : NSObject
/// This function returns the name of the Storyly event
/// \param event Incoming Storyly event type
///
///
/// returns:
/// String event name
+ (NSString * _Nonnull)storyComponentNameWithComponentType:(enum StoryComponentType)componentType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Emoji component.
SWIFT_CLASS_NAMED("StoryEmojiComponent")
@interface StoryEmojiComponent : StoryComponent
/// List of the emojis in the component
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull emojiCodes;
/// Emoji index that the user selected
@property (nonatomic, readonly) NSInteger selectedEmojiIndex;
/// Custom payload for this emoji if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryEmojiComponent initialization
/// \param id Id of the interactive component
///
/// \param emojiCodes List of the emojis in the component
///
/// \param selectedEmojiIndex Emoji index that the user selected
///
/// \param customPayload Custom payload for this emoji if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id emojiCodes:(NSArray<NSString *> * _Nonnull)emojiCodes selectedEmojiIndex:(NSInteger)selectedEmojiIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;
enum StoryGroupType : NSInteger;

/// This class represents a story group in the StorylyView.
SWIFT_CLASS_NAMED("StoryGroup")
@interface StoryGroup : NSObject
/// ID of the story group
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// Title of the story group
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// URL of the story group icon image
@property (nonatomic, readonly, copy) NSURL * _Nullable iconUrl;
/// URLs of different the story group icon themes
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSURL *> * _Nullable thematicIconUrls;
/// URL of the story group cover image
@property (nonatomic, readonly, copy) NSURL * _Nullable coverUrl;
/// Order index of the story group
@property (nonatomic, readonly) NSInteger index;
/// State of the story group that shows whether all of the stories are seen or not
@property (nonatomic, readonly) BOOL seen;
/// List of stories in the story group
@property (nonatomic, readonly, copy) NSArray<Story *> * _Nonnull stories;
/// Pin status of the story group that shows whether group is pinned or not
@property (nonatomic, readonly) BOOL pinned;
/// Type of the story group
@property (nonatomic, readonly) enum StoryGroupType type;
/// Moments User of this group
@property (nonatomic, readonly, strong) MomentsUser * _Nullable momentsUser;
/// StoryGroup initialization
/// \param id ID of the story group
///
/// \param title Title of the story group
///
/// \param iconUrl URL of the story group icon image
///
/// \param thematicIconUrls URLs of different the story group icon themes
///
/// \param coverUrl URL of the story group cover image
///
/// \param index Order index of the story group
///
/// \param seen State of the story group that shows whether all of the stories are seen or not
///
/// \param stories List of stories in the story group
///
/// \param pinned Pin status of the story group that shows whether group is pinned or not
///
/// \param type Type of the story group
///
/// \param momentsUser Moments User of this group
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title iconUrl:(NSURL * _Nullable)iconUrl thematicIconUrls:(NSDictionary<NSString *, NSURL *> * _Nullable)thematicIconUrls coverUrl:(NSURL * _Nullable)coverUrl index:(NSInteger)index seen:(BOOL)seen stories:(NSArray<Story *> * _Nonnull)stories pinned:(BOOL)pinned type:(enum StoryGroupType)type momentsUser:(MomentsUser * _Nullable)momentsUser OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents available animations that can be set for customization.
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupAnimation, "StoryGroupAnimation", open) {
/// Disables animation
  StoryGroupAnimationDisabled = 0,
/// Default animation
  StoryGroupAnimationBorderRotation = 1,
};

@class UIColor;

/// This property allows you to change the IVoD groups seen, unseen border
/// colors and IVoD icon color
SWIFT_CLASS("_TtC7Storyly26StoryGroupIconColorStyling")
@interface StoryGroupIconColorStyling : NSObject
/// This property allows you to change the border color of the IVoD story group
/// icons which are watched by the user.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyGroupIVodIconBorderColorSeen;
/// This property allows you to change the border color of the IVoD story
/// group icons which are unwatched by the user.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyGroupIVodIconBorderColorNotSeen;
/// If any of the story group is selected as IVoD group type from dashboard,
/// a little camera will appear along with the story group icon. This
/// property allows you to change the background color of this IVoD icon
@property (nonatomic, strong) UIColor * _Nonnull storyGroupIVodIconColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents styling of story group icons
SWIFT_CLASS_NAMED("StoryGroupIconStyling")
@interface StoryGroupIconStyling : NSObject
/// Height of the story group icon
@property (nonatomic) CGFloat height;
/// Width of the story group icon
@property (nonatomic) CGFloat width;
/// Corner radius value of the story group icon
@property (nonatomic) CGFloat cornerRadius;
/// StoryGroupIconStyling initialization
/// \param height Height of the story group icon
///
/// \param width Width of the story group icon
///
/// \param cornerRadius Corner radius value of the story group icon
///
- (nonnull instancetype)initWithHeight:(CGFloat)height width:(CGFloat)width cornerRadius:(CGFloat)cornerRadius OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum represents orientation of story group list
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupListOrientation, "StoryGroupListOrientation", open) {
/// Horizontal orientation of story group list
  StoryGroupListOrientationHorizontal = 0,
/// Vertical orientation of story group list
  StoryGroupListOrientationVertical = 1,
};


/// This data class represents styling of story group list
SWIFT_CLASS_NAMED("StoryGroupListStyling")
@interface StoryGroupListStyling : NSObject
/// Orientation value of story group list
@property (nonatomic) enum StoryGroupListOrientation orientation;
/// Based on orientation horizontal orientation row count or vertical orientation colum count of story group list
@property (nonatomic) NSInteger sections;
/// Edge padding value of the first and last story groups for orientation horizontal
@property (nonatomic) CGFloat horizontalEdgePadding;
/// Edge padding value of the first and last story groups for orientation vertical
@property (nonatomic) CGFloat verticalEdgePadding;
/// Horizontal padding value between story groups
@property (nonatomic) CGFloat horizontalPaddingBetweenItems;
/// Vertical padding value between story groups
@property (nonatomic) CGFloat verticalPaddingBetweenItems;
/// StoryGroupIconStyling initialization
/// \param orientation Orientation value of story group list
///
/// \param sections Based on orientation horizontal orientation row count or vertical orientation colum count of story group list
///
/// \param horizontalEdgePadding Edge padding value of the first and last story groups for orientation horizontal
///
/// \param verticalEdgePadding Edge padding value of the first and last story groups for orientation vertical
///
/// \param horizontalPaddingBetweenItems Horizontal padding value between story groups
///
/// \param verticalPaddingBetweenItems Vertical padding value between story groups
///
- (nonnull instancetype)initWithOrientation:(enum StoryGroupListOrientation)orientation sections:(NSInteger)sections horizontalEdgePadding:(CGFloat)horizontalEdgePadding verticalEdgePadding:(CGFloat)verticalEdgePadding horizontalPaddingBetweenItems:(CGFloat)horizontalPaddingBetweenItems verticalPaddingBetweenItems:(CGFloat)verticalPaddingBetweenItems OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum represents available story group sizes that be can set for customization
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupSize, "StoryGroupSize", open) {
/// Small group size which is the samllest and does not have story group text
  StoryGroupSizeSmall = 0,
/// Large group size which is the default group size of the Storyly
  StoryGroupSizeLarge = 1,
/// Custom group size which has customizable features
  StoryGroupSizeCustom = 2,
};


/// This data class represents styling of story group texts
SWIFT_CLASS_NAMED("StoryGroupTextStyling")
@interface StoryGroupTextStyling : NSObject
/// Visibility of the story group text
@property (nonatomic) BOOL isVisible;
/// Color of the seen story group text
@property (nonatomic, strong) UIColor * _Nonnull colorSeen;
/// Color of the not seen story group text
@property (nonatomic, strong) UIColor * _Nonnull colorNotSeen;
/// Font of the story group text
@property (nonatomic, strong) UIFont * _Nullable font;
/// Number of lines of the story group text
@property (nonatomic) NSInteger lines;
/// StoryGroupTextStyling initialization
/// \param isVisible Visibility of the story group text
///
/// \param color Color of the story group text
///
/// \param font Font of the story group text
///
/// \param lines Number of lines of the story group text
///
- (nonnull instancetype)initWithIsVisible:(BOOL)isVisible colorSeen:(UIColor * _Nonnull)colorSeen colorNotSeen:(UIColor * _Nonnull)colorNotSeen font:(UIFont * _Nullable)font lines:(NSInteger)lines OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents the type of the story group.
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupType, "StoryGroupType", open) {
/// Default type for the story group type
  StoryGroupTypeDefault = 0,
/// Denotes story group type is Interactive Video on Demand
  StoryGroupTypeIVod = 1,
/// Denotes story group type is Ad
  StoryGroupTypeAd = 2,
/// Denotes story group type is Moments
  StoryGroupTypeMomentsDefault = 3,
/// Denotes story group type is Moments Block
  StoryGroupTypeMomentsBlock = 4,
};

@class NSCoder;

/// This class defines the parent class of the custom styling StoryGroupView classes
SWIFT_CLASS("_TtC7Storyly14StoryGroupView")
@interface StoryGroupView : UIView
/// This function fills the StoryGroupView components
- (void)populateViewWithStoryGroup:(StoryGroup * _Nullable)storyGroup;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This protocol defines the structure of StoryGroupViewFactory
SWIFT_PROTOCOL("_TtP7Storyly21StoryGroupViewFactory_")
@protocol StoryGroupViewFactory
/// This function is called when a new view is requested
- (StoryGroupView * _Nonnull)createView SWIFT_WARN_UNUSED_RESULT;
/// This function is called when the size of the StoryGroupView is requested
- (CGSize)getSize SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

/// This data class represents styling of story view header
SWIFT_CLASS("_TtC7Storyly18StoryHeaderStyling")
@interface StoryHeaderStyling : NSObject
/// Visibility of the story view header text
@property (nonatomic) BOOL isTextVisible;
/// Visibility of the story view header icon
@property (nonatomic) BOOL isIconVisible;
/// Visibility of the story view header close button
@property (nonatomic) BOOL isCloseButtonVisible;
/// UIImage of the story view header close button
@property (nonatomic, strong) UIImage * _Nullable closeButtonIcon;
/// UIImage of the story view header share button
@property (nonatomic, strong) UIImage * _Nullable shareButtonIcon;
/// StoryHeaderStyling initialization
/// \param isTextVisible Visibility of the story view header text
///
/// \param isIconVisible Visibility of the story view header icon
///
/// \param isCloseButtonVisible Visibility of the story view header close button
///
/// \param closeButtonIcon UIImage of the story view header close button
///
/// \param shareButtonIcon UIImage of the story view header share button
///
- (nonnull instancetype)initWithIsTextVisible:(BOOL)isTextVisible isIconVisible:(BOOL)isIconVisible isCloseButtonVisible:(BOOL)isCloseButtonVisible closeButtonIcon:(UIImage * _Nullable)closeButtonIcon shareButtonIcon:(UIImage * _Nullable)shareButtonIcon OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents the Image Quiz component.
SWIFT_CLASS_NAMED("StoryImageQuizComponent")
@interface StoryImageQuizComponent : StoryComponent
/// Title of the image quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of texts of the options if exists, otherwise list of image urls of image quiz
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable options;
/// Index of the right answer if exists
@property (nonatomic, readonly, strong) NSNumber * _Nullable rightAnswerIndex;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// Custom payload for this image quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryImageQuizComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the image quiz if exists
///
/// \param options List of texts of the options if exists, otherwise list of image urls of image quiz
///
/// \param rightAnswerIndex Index of the right answer if exists
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this image quiz if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nullable)options rightAnswerIndex:(NSNumber * _Nullable)rightAnswerIndex selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

enum StoryType : NSInteger;

/// This data class represents the media of a story.
SWIFT_CLASS_NAMED("StoryMedia")
@interface StoryMedia : NSObject
/// Type of the story
@property (nonatomic, readonly) enum StoryType type;
/// List of story components in the story
@property (nonatomic, readonly, copy) NSArray<StoryComponent *> * _Nullable storyComponentList;
/// List of action urls in the story
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable actionUrlList;
/// URL which the user has just interacted with
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// URL of the preview image of the story
@property (nonatomic, copy) NSURL * _Nullable previewUrl;
/// StoryMedia initialization
/// \param type Type of the story
///
/// \param storyComponentList List of story components in the story
///
/// \param actionUrlList List of action urls in the story
///
/// \param actionUrl URL which the user has just interacted with
///
/// \param previewUrl URL of the preview image of the story
///
- (nonnull instancetype)initWithType:(enum StoryType)type storyComponentList:(NSArray<StoryComponent *> * _Nullable)storyComponentList actionUrlList:(NSArray<NSString *> * _Nullable)actionUrlList actionUrl:(NSString * _Nullable)actionUrl previewUrl:(NSURL * _Nullable)previewUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents the Poll component.
SWIFT_CLASS_NAMED("StoryPollComponent")
@interface StoryPollComponent : StoryComponent
/// Title of the poll if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of options in the poll
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull options;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// Custom payload for this poll if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryPollComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the poll if exists
///
/// \param options List of options in the poll
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this poll if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the PromoCode component.
SWIFT_CLASS_NAMED("StoryPromoCodeComponent")
@interface StoryPromoCodeComponent : StoryComponent
/// PromoCode text that the user copied
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// StoryRatingComponent initialization
/// \param id Id of the interactive component
///
/// \param text PromoCode text that the user copied
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Quiz component.
SWIFT_CLASS_NAMED("StoryQuizComponent")
@interface StoryQuizComponent : StoryComponent
/// Title of the quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of options in the quiz
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull options;
/// Index of the right answer if exists
@property (nonatomic, readonly, strong) NSNumber * _Nullable rightAnswerIndex;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// Custom payload for this quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryQuizComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the quiz if exists
///
/// \param options List of options in the quiz
///
/// \param rightAnswerIndex Index of the right answer if exists
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this quiz if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options rightAnswerIndex:(NSNumber * _Nullable)rightAnswerIndex selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Rating component.
SWIFT_CLASS_NAMED("StoryRatingComponent")
@interface StoryRatingComponent : StoryComponent
/// Emoji code as the thumb emoji
@property (nonatomic, readonly, copy) NSString * _Nonnull emojiCode;
/// Rating value which user rated in the component
@property (nonatomic, readonly) NSInteger rating;
/// Custom payload for this rating if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryRatingComponent initialization
/// \param id Id of the interactive component
///
/// \param emojiCode Emoji code as the thumb emoji
///
/// \param rating Rating value which user rated in the component
///
/// \param customPayload Custom payload for this rating if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id emojiCode:(NSString * _Nonnull)emojiCode rating:(NSInteger)rating customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum represents the type of a story content
typedef SWIFT_ENUM_NAMED(NSInteger, StoryType, "StoryType", open) {
/// Unidentified story type
  StoryTypeUnknown = 0,
/// Denotes the type of the story is Image
  StoryTypeImage = 1,
/// Denotes the type of the story is Video
  StoryTypeVideo = 2,
/// Denotes the type of the story is Interactive Video on Demand
  StoryTypeVod = 3,
/// Denotes the type of the story is an Ad View
  StoryTypeAd = 4,
};

@class UITouch;

/// This protocol represents an ad view that can be opened between stories
SWIFT_PROTOCOL("_TtP7Storyly13StorylyAdView_")
@protocol StorylyAdView
/// Use this field to dispatch custom action clicked event
@property (nonatomic, copy) void (^ _Nullable onActionClicked)(void);
/// Implement this method to return the ad view
- (UIView * _Nonnull)getView SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return the icon url of the ad view
///
/// returns:
/// Icon URL of the ad view
- (NSURL * _Nonnull)getIcon SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return the title of the ad view
///
/// returns:
/// Title of the ad view
- (NSString * _Nonnull)getTitle SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return the data of the ad view
///
/// returns:
/// Title of the ad view
- (NSDictionary<NSString *, id> * _Nonnull)getCustomData SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to do your destroy operations
- (void)destroy;
/// Implement this method to do your loading operations
///
/// returns:
/// Duration of the ad view
- (NSInteger)load SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to pause your ad view
- (void)pause;
/// Implement this method to reset operations
- (void)reset;
/// Implement this method to resume your ad view
- (void)resume;
/// Override this method to set layers, for example CTA button
- (void)setLayersWithLayers:(NSDictionary<NSString *, UIView *> * _Nonnull)layers;
/// Override this method to enable custom clicable views
- (BOOL)checkHitWithTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


/// This protocol is used to load the ad view
SWIFT_PROTOCOL("_TtP7Storyly21StorylyAdViewListener_")
@protocol StorylyAdViewListener
/// Implement this method to do loading operations of your ad view
- (void)onLoad:(id <StorylyAdView> _Nonnull)adView;
@end


/// This protocol is used as an entrance for the ad view
SWIFT_PROTOCOL("_TtP7Storyly21StorylyAdViewProvider_")
@protocol StorylyAdViewProvider
/// Implement this method to do your operations when ad view is requested
- (void)onRequest:(id <StorylyAdViewListener> _Nonnull)adViewListener :(CGRect)frame;
@end

/// This enum represents the source of the storyly data
typedef SWIFT_ENUM_NAMED(NSInteger, StorylyDataSource, "StorylyDataSource", open) {
/// Stories in Storyly API
  StorylyDataSourceAPI = 0,
/// Stories in Storyly Moments API
  StorylyDataSourceMomentsAPI = 1,
/// Stories in local device cache
  StorylyDataSourceLocal = 2,
/// Stories with user specific data
  StorylyDataSourceUserData = 3,
/// Stories with product specific data
  StorylyDataSourceProductData = 4,
};

@class StorylyView;
@class UIViewController;
enum StorylyEvent : NSInteger;

/// This delegate  represents the class which notifies application when an event
/// occurs in StorylyView.
SWIFT_PROTOCOL_NAMED("StorylyDelegate")
@protocol StorylyDelegate
@optional
/// This function will let you know that Storyly has completed
/// its network operations and story group list has just shown to the user.
/// \param storylyView StorylyView instance in which storyly is loaded
///
/// \param storyGroupList List of story groups when storyly is loaded
///
- (void)storylyLoaded:(StorylyView * _Nonnull)storylyView storyGroupList:(NSArray<StoryGroup *> * _Nonnull)storyGroupList SWIFT_UNAVAILABLE_MSG("This function is removed in v1.18.0; please use the storylyLoaded with dataSource parameter");
/// This function will let you know that Storyly has completed
/// its network operations and story group list has just shown to the user.
/// \param storylyView StorylyView instance in which storyly is loaded
///
/// \param storyGroupList List of story groups when storyly is loaded
///
/// \param dataSource Source of the storyly data
///
- (void)storylyLoaded:(StorylyView * _Nonnull)storylyView storyGroupList:(NSArray<StoryGroup *> * _Nonnull)storyGroupList dataSource:(enum StorylyDataSource)dataSource;
/// This function will let you know that Storyly has completed
/// its network operations and had a problem while fetching your stories
/// \param storylyView StorylyView instance in which storyly is failed to load
///
/// \param errorMessage Error message of the load fail reason
///
- (void)storylyLoadFailed:(StorylyView * _Nonnull)storylyView errorMessage:(NSString * _Nonnull)errorMessage;
/// This function will notify your application in case of Swipe Up or CTA Button action.
/// \param storylyView StorylyView instance in which action is occurred
///
/// \param rootViewController RootViewController of the story view
///
/// \param story Story in which action is occurred
///
- (void)storylyActionClicked:(StorylyView * _Nonnull)storylyView rootViewController:(UIViewController * _Nonnull)rootViewController story:(Story * _Nonnull)story;
/// This function will let you know that stories are started to be presented to the users.
/// \param storylyView StorylyView instance in which stories are started to shown
///
- (void)storylyStoryPresented:(StorylyView * _Nonnull)storylyView;
/// This function will let you know that programmatic story show are failed.
/// \param storylyView StorylyView instance that event occurred
///
/// \param errorMessage Error message of the fail reason
///
- (void)storylyStoryPresentFailed:(StorylyView * _Nonnull)storylyView errorMessage:(NSString * _Nonnull)errorMessage;
/// This function will let you know that user dismissed the current story while watching it.
/// \param storylyView StorylyView instance in which the story is dismissed
///
- (void)storylyStoryDismissed:(StorylyView * _Nonnull)storylyView;
/// This function will allow you to get reactions of users from specific interactive components.
/// \param storylyView StorylyView instance in which the user interacted with a component
///
/// \param storyGroup Story group in which the user interacted with a component
///
/// \param story Story in which the user interacted with a component
///
/// \param storyComponent Interactive component that user is interacted with
///
- (void)storylyUserInteracted:(StorylyView * _Nonnull)storylyView storyGroup:(StoryGroup * _Nonnull)storyGroup story:(Story * _Nonnull)story storyComponent:(StoryComponent * _Nonnull)storyComponent;
/// This function will notify you about all Storyly events and let you to send these events to
/// specific data platforms
/// \param storylyView StorylyView instance in which the event is received
///
/// \param event Storyly event type which is received
///
/// \param storyGroup Story group in which the event is received
///
/// \param story Story in which the event is received
///
/// \param storyComponent Interactive story component if event is related with a story component
///
- (void)storylyEvent:(StorylyView * _Nonnull)storylyView event:(enum StorylyEvent)event storyGroup:(StoryGroup * _Nullable)storyGroup story:(Story * _Nullable)story storyComponent:(StoryComponent * _Nullable)storyComponent;
@end

/// This enum represents all possible events that can be sent from Storyly
typedef SWIFT_ENUM(NSInteger, StorylyEvent, open) {
/// Sent when a story group is opened by user selection, programmatical selection and deeplink
  StorylyEventStoryGroupOpened = 0,
/// Sent when a story group is opened by user selection
  StorylyEventStoryGroupUserOpened = 1,
/// Sent when a story group is opened using a deeplink
  StorylyEventStoryGroupDeepLinkOpened = 2,
/// Sent when a story group is opened programmatically
  StorylyEventStoryGroupProgrammaticallyOpened = 3,
/// Sent when a story group is completed
  StorylyEventStoryGroupCompleted = 4,
/// Sent when a user does previous swipe gesture while watching a story in a story group
  StorylyEventStoryGroupPreviousSwiped = 5,
/// Sent when a user does next swipe gesture while watching a story in a story group
  StorylyEventStoryGroupNextSwiped = 6,
/// Sent when a user dismisses or clicks the close button to close the story group
  StorylyEventStoryGroupClosed = 7,
/// Sent after a while when a user sees a story as an indicator that shows story is watched
  StorylyEventStoryImpression = 8,
/// Sent when a story is loaded
  StorylyEventStoryViewed = 9,
/// Sent after a story is finished
  StorylyEventStoryCompleted = 10,
/// Sent when a user does previous click tap while watching a story
  StorylyEventStoryPreviousClicked = 11,
/// Sent when a user does next click tap while watching a story
  StorylyEventStoryNextClicked = 12,
/// Sent when a story is paused
  StorylyEventStoryPaused = 13,
/// Sent when a story is resumed
  StorylyEventStoryResumed = 14,
/// Sent when a story share url is generated and clicked to a sharing way
  StorylyEventStoryShared = 15,
/// Sent when a user clicks to interactive CTA button or does a swipe up action
  StorylyEventStoryCTAClicked = 16,
/// Sent when a user clicks to an emoji on interactive emoji list
  StorylyEventStoryEmojiClicked = 17,
/// Sent when a user answers a poll
  StorylyEventStoryPollAnswered = 18,
/// Sent when a user answers a quiz
  StorylyEventStoryQuizAnswered = 19,
/// Sent when a user answers a image quiz
  StorylyEventStoryImageQuizAnswered = 20,
/// Sent when a user adds reminder to a interactive countdown component
  StorylyEventStoryCountdownReminderAdded = 21,
/// Sent when a user removes the reminder from a interactive countdown component
  StorylyEventStoryCountdownReminderRemoved = 22,
/// Sent when a user rates in interactive rating component
  StorylyEventStoryRated = 23,
/// Sent when a user sees an interactive component
  StorylyEventStoryInteractiveImpression = 24,
/// Sent when a user clikcs a product tag point
  StorylyEventStoryProductTagExpanded = 25,
/// Sent when a user clicks a product expanded area
  StorylyEventStoryProductTagClicked = 26,
/// Sent when a user clicks a product card area
  StorylyEventStoryProductCardClicked = 27,
/// Sent when a user copy a promo code
  StorylyEventStoryPromoCodeCopied = 28,
/// Sent when a user sends a comment
  StorylyEventStoryCommentSent = 29,
/// Sent when a user opens input area
  StorylyEventStoryCommentInputOpened = 30,
/// Sent when a user closes input area
  StorylyEventStoryCommentInputClosed = 31,
/// Sent when a user clicks replay button in interactive video on demand story
  StorylyEventStorylyIVodReplayButtonClicked = 32,
/// Sent when a user seeks the video in interactive video on demand story
  StorylyEventStorylyIVodSeeked = 33,
/// Sent when a user likes a Moments story
  StorylyEventStoryLiked = 34,
/// Sent when a user unlikes a Moments story
  StorylyEventStoryUnliked = 35,
/// Sent when a product added
  StorylyEventStoryProductAdded = 36,
/// Sent when a product updated
  StorylyEventStoryProductUpdated = 37,
/// Sent when product removed
  StorylyEventStoryProductRemoved = 38,
/// Sent when checkout button clicked
  StorylyEventStoryCheckoutButtonClicked = 39,
/// Sent when cart button clicked from success sheet
  StorylyEventStoryCartButtonClicked = 40,
/// Sent when cart view clicked
  StorylyEventStoryCartViewClicked = 41,
/// Sent  when product catalog is clicked
  StorylyEventStoryProductCatalogClicked = 42,
/// Sent  when product selected
  StorylyEventStoryProductSelected = 43,
};


/// This class does the enum to string conversion of the Storyly events
SWIFT_CLASS("_TtC7Storyly18StorylyEventHelper")
@interface StorylyEventHelper : NSObject
/// This function returns the name of the Storyly event
/// \param event Incoming Storyly event type
///
///
/// returns:
/// String event name
+ (NSString * _Nonnull)storylyEventNameWithEvent:(enum StorylyEvent)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class StorylySegmentation;

/// This class triggers initialization of Storyly
SWIFT_CLASS_NAMED("StorylyInit")
@interface StorylyInit : NSObject
@property (nonatomic) BOOL isProductFallbackEnabled;
@property (nonatomic) BOOL isProductCartEnabled;
/// storylyPayload information to get moments groups for the user
@property (nonatomic, copy) NSString * _Nullable storylyPayload;
/// StorylySegmentation instance to target story groups for the user
@property (nonatomic, strong) StorylySegmentation * _Nonnull segmentation;
/// User specific information to fill the story/story group data
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull userData;
/// StorylyInit initialization
/// \param storylyId Instance token from Storyly dashboard
///
- (nonnull instancetype)initWithStorylyId:(NSString * _Nonnull)storylyId OBJC_DESIGNATED_INITIALIZER;
/// StorylyInit initialization
/// \param storylyId Instance token from Storyly dashboard
///
/// \param segmentation StorylySegmentation instance to target story groups for the user
///
/// \param customParameter Custom parameter for analytical purposes
///
/// \param isTestMode IsTestMode defines whether it is a test device or not. If true, test groups are sent from the server.
///
/// \param storylyPayload User payload to use for Moments by Storyly
///
/// \param userData User specific information to fill the story/story group data
///
- (nonnull instancetype)initWithStorylyId:(NSString * _Nonnull)storylyId segmentation:(StorylySegmentation * _Nonnull)segmentation customParameter:(NSString * _Nullable)customParameter isTestMode:(BOOL)isTestMode storylyPayload:(NSString * _Nullable)storylyPayload userData:(NSDictionary<NSString *, NSString *> * _Nonnull)userData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents available layout direction that be can set for customization
typedef SWIFT_ENUM_NAMED(NSInteger, StorylyLayoutDirection, "StorylyLayoutDirection", open) {
/// Left-to-right layout direction
  StorylyLayoutDirectionLTR = 0,
/// Right-to-left layout direction
  StorylyLayoutDirectionRTL = 1,
};


/// This protocol represents a loading view that you can inherit to
/// customize the loading view of stories
SWIFT_PROTOCOL("_TtP7Storyly18StorylyLoadingView_")
@protocol StorylyLoadingView
/// Implement this method to return the loading view
- (UIView * _Nonnull)getView SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to include your show actions
- (void)show;
/// Implement this method to include your hide actions
- (void)hide;
@end


/// This delegate represents the class which notifies application when an event
/// occurs in Storyly Moments.
SWIFT_PROTOCOL("_TtP7Storyly22StorylyMomentsDelegate_")
@protocol StorylyMomentsDelegate
@optional
/// This function will let you know that a user clicked header icon of a Storyly Moments story
/// \param storylyView StorylyView instance in which storyly is loaded
///
/// \param storyGroup Story group in which the user clicked the icon
///
/// \param story Story in which the user user clicked the icon
///
- (void)storyHeaderClicked:(StorylyView * _Nonnull)storylyView storyGroup:(StoryGroup * _Nullable)storyGroup story:(Story * _Nullable)story;
@end


SWIFT_CLASS_NAMED("StorylyMomentsIconStyling")
@interface StorylyMomentsIconStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Builder")
@interface StorylyMomentsIconStylingBuilder : NSObject
/// Sets custom image to like icon. Max size of corresponding view is 20x20px.
/// Scale type of the view is ContentMode.scaleAspectFit.
- (StorylyMomentsIconStylingBuilder * _Nonnull)setStoryLikeIconWithLikeIcon:(UIImage * _Nullable)likeIcon unlikeIcon:(UIImage * _Nullable)unlikeIcon SWIFT_WARN_UNUSED_RESULT;
/// Sets custom image to like animation icon.
/// Scale type of the view is ContentMode.scaleAspectFit.
- (StorylyMomentsIconStylingBuilder * _Nonnull)setStoryLikeAnimationIconWithIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
/// Sets custom image to view count icon. Max size of corresponding view is 20x20px.
/// Scale type of the view is ContentMode.scaleAspectFit.
- (StorylyMomentsIconStylingBuilder * _Nonnull)setStoryViewCountIconWithIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
/// Sets custom image to story options icon. Max size of corresponding view is 32x32px.
/// Scale type of the view is ContentMode.scaleAspectFit.
- (StorylyMomentsIconStylingBuilder * _Nonnull)setStoryOptionsIconWithIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
- (StorylyMomentsIconStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class holds the config properties of Moments Link CTA Interactive
SWIFT_CLASS_NAMED("StorylyMomentsLinkCTAStyling")
@interface StorylyMomentsLinkCTAStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class of StorylyMomentsLinkCTAStyling
SWIFT_CLASS_NAMED("Builder")
@interface StorylyMomentsLinkCTAStylingBuilder : NSObject
/// This function allows you to change the link text color of the Moments Link CTA view
/// \param color Color to set
///
///
/// returns:
/// StorylyMomentsLinkCTAStyling instance
- (StorylyMomentsLinkCTAStylingBuilder * _Nonnull)setLinkTextColorWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// This function builds StorylyMomentsLinkCTAStyling with the current properties
///
/// returns:
/// StorylyMomentsLinkCTAStyling instance
- (StorylyMomentsLinkCTAStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class holds the config properties of Moments Text Interactive
SWIFT_CLASS_NAMED("StorylyMomentsTextStyling")
@interface StorylyMomentsTextStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class of MomentsTextConfigBuilder
SWIFT_CLASS_NAMED("Builder")
@interface StorylyMomentsTextStylingBuilder : NSObject
/// This function allows you to set different fonts that your users will be able to select in text interactive
/// \param fonts Fonts to show to your users while creating a text interactive
///
///
/// returns:
/// Current builder
- (StorylyMomentsTextStylingBuilder * _Nonnull)setCustomFontsWithFonts:(NSArray<MomentsCustomFont *> * _Nonnull)fonts SWIFT_WARN_UNUSED_RESULT;
/// This function builds StorylyMomentsTextStyling with the current properties
///
/// returns:
/// StorylyMomentsTextStyling instance
- (StorylyMomentsTextStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("StorylyMomentsTheme")
@interface StorylyMomentsTheme : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Builder")
@interface StorylyMomentsThemeBuilder : NSObject
/// This function allows you to set custom icons to Moments
/// \param iconStyling StorylyMomentsIconStyling instance to set 
///
- (StorylyMomentsThemeBuilder * _Nonnull)setIconStylingWithIconStyling:(StorylyMomentsIconStyling * _Nonnull)iconStyling SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to customize Link CTA view
/// \param linkCTAStyling StorylyMomentsLinkCTAStyling instance to set 
///
- (StorylyMomentsThemeBuilder * _Nonnull)setLinkCtaStylingWithLinkCTAStyling:(StorylyMomentsLinkCTAStyling * _Nonnull)linkCTAStyling SWIFT_WARN_UNUSED_RESULT;
- (StorylyMomentsThemeBuilder * _Nonnull)setTextStylingWithTextStyling:(StorylyMomentsTextStyling * _Nonnull)textStyling SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to see the Moments story view count,like count and avatars of the last 3 liked users
/// It is true by default.
/// \param isVisible Show moments statistics if set to true 
///
- (StorylyMomentsThemeBuilder * _Nonnull)setMomentsUserAnalyticsVisibilityWithIsVisible:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
- (StorylyMomentsTheme * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This delegate  represents the class which notifies application when an product related event
/// occurs in StorylyView.
SWIFT_PROTOCOL_NAMED("StorylyProductDelegate")
@protocol StorylyProductDelegate
@optional
/// This function will notify you to get ids of products
/// \param storylyView StorylyView instance in which the user interacted with a component
///
/// \param productIds Found product ids in stories
///
- (void)storylyHydration:(StorylyView * _Nonnull)storylyView productIds:(NSArray<NSString *> * _Nonnull)productIds;
/// This function will notify you about all Storyly events and let you to send these events to
/// specific data platforms
/// \param storylyView StorylyView instance in which the event is received
///
/// \param event Storyly event type which is received
///
- (void)storylyEvent:(StorylyView * _Nonnull)storylyView event:(enum StorylyEvent)event;
/// This function will notify you about updates the cart in a StorylyView component
/// \param storylyView StorylyView instance in which the event is received
///
/// \param event Storyly event type which is received
///
/// \param cart Contains information about the items in the cart
///
/// \param change Represents the item being changed in the cart.
///
/// \param onSuccess It represents a callback function that will be executed if the “update cart” operation is successful
///
/// \param onFail It represents a callback function that will be executed if the “update cart” operation fails
///
- (void)storylyUpdateCartEventWithStorylyView:(StorylyView * _Nonnull)storylyView event:(enum StorylyEvent)event cart:(STRCart * _Nullable)cart change:(STRCartItem * _Nullable)change onSuccess:(void (^ _Nullable)(STRCart * _Nonnull))onSuccess onFail:(void (^ _Nullable)(STRCartEventResult * _Nonnull))onFail;
@end


/// This class is used in Storyly initialization if you are planning to target
/// labeled story groups which are set in dashboard
SWIFT_CLASS_NAMED("StorylySegmentation")
@interface StorylySegmentation : NSObject
/// StorylySegmentation initialization
/// \param segments Label set to target story groups
///
- (nonnull instancetype)initWithSegments:(NSSet<NSString *> * _Nullable)segments OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class is the main view of Storyly.
SWIFT_CLASS_NAMED("StorylyView")
@interface StorylyView : UIView
/// This property triggers StorylyView initialization
@property (nonatomic, strong) StorylyInit * _Nonnull storylyInit;
/// RootviewController of the StorylyView
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
/// Delegate of the StorylyView which will notify you when an event occurs in StorylyView.
@property (nonatomic, weak) id <StorylyDelegate> _Nullable delegate;
/// Delegate of the StorylyView which will notify you when an product related event occurs in StorylyView.
@property (nonatomic, weak) id <StorylyProductDelegate> _Nullable productDelegate;
/// Delegate of the StorylyMoments which will notify you when an event occurs in StorylyMoments.
@property (nonatomic, weak) id <StorylyMomentsDelegate> _Nullable momentsDelegate;
/// This property will allow you to add ad view between stories
@property (nonatomic, weak) id <StorylyAdViewProvider> _Nullable storylyAdViewProvider;
/// This property will allow you to add custom loading view
@property (nonatomic, weak) id <StorylyLoadingView> _Nullable storylyLoadingView;
/// This property will allow you to add custom story group view
@property (nonatomic, weak) id <StoryGroupViewFactory> _Nullable storyGroupViewFactory;
/// This property will allow you to customize share url
@property (nonatomic, copy) NSString * _Nullable storylyShareUrl;
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable accessibilityIdentifier;
/// This property allows you to change the border color of the story group
/// icons which are watched by the user.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyGroupIconBorderColorSeen;
/// This property allows you to change the border color of the story
/// group icons which are unwatched by the user.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyGroupIconBorderColorNotSeen;
/// This property allows you to change the background color of the story group icon
/// which is shown to the user as skeleton view till the stories are loaded
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupIconBackgroundColor;
/// This property allows you to change the text color of the story group
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupTextColorSeen;
/// This property allows you to change the text color of the story group
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupTextColorNotSeen;
/// This property allows you to change the font of the story group text
@property (nonatomic, strong) UIFont * _Nonnull storyGroupTextFont;
/// This property allows you to change the number of lines of the story group text
@property (nonatomic) IBInspectable NSInteger storyGroupTextLines;
/// If any of the story group is selected as pinned group from dashboard,
/// a little star icon will appear along with the story group icon. This
/// property allows you to change the background color of this pin icon
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupPinIconColor;
/// This property allows you to change the header icon border color of the story view
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyItemIconBorderColor;
/// This property allows you to change the header text color of the story view
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyItemTextColor;
/// This property allows you to change the font of the story view header text
@property (nonatomic, strong) UIFont * _Nonnull storyItemTextFont;
/// This function allows you to change the typeface of the font on the interactives
@property (nonatomic, strong) UIFont * _Nonnull storyInteractiveFont;
/// This property allows you to change the progress bar colors of the story view.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storylyItemProgressBarColor;
/// This property allows you to change the size of the story group
@property (nonatomic, copy) IBInspectable NSString * _Nonnull storyGroupSize;
/// This property allows you to change the animation of the story group
@property (nonatomic, copy) IBInspectable NSString * _Nonnull storyGroupAnimation;
/// This property allows you to change height of the story group icon
/// seealso:
/// StoryGroupIconStyling
@property (nonatomic) IBInspectable CGFloat storyGroupIconHeight;
/// This property allows you to change width of the story group icon
/// seealso:
/// StoryGroupIconStyling
@property (nonatomic) IBInspectable CGFloat storyGroupIconWidth;
/// This property allows you to change corner radius value of the story group icon
/// seealso:
/// StoryGroupIconStyling
@property (nonatomic) IBInspectable CGFloat storyGroupIconCornerRadius;
/// This property allows you to change the visibility of the story group text
/// seealso:
/// StoryGroupTextStyling
@property (nonatomic) IBInspectable BOOL storyGroupTextIsVisible;
/// This property allows you to change the visibility of the story view header text
/// seealso:
/// StoryHeaderStyling
@property (nonatomic) IBInspectable BOOL storyHeaderTextIsVisible;
/// This property allows you to change the visibility of the story view header icon
/// seealso:
/// StoryHeaderStyling
@property (nonatomic) IBInspectable BOOL storyHeaderIconIsVisible;
/// This property allows you to change the visibility of the story view header close button
/// seealso:
/// StoryHeaderStyling
@property (nonatomic) IBInspectable BOOL storyHeaderCloseButtonIsVisible;
/// This property allows you to change the UIImage of the story view header close button icon
/// seealso:
/// StoryHeaderStyling
@property (nonatomic, strong) IBInspectable UIImage * _Nullable storyHeaderCloseButtonIcon;
/// This property allows you to change the UIImage of the story view header share button icon
/// seealso:
/// StoryHeaderStyling
@property (nonatomic, strong) IBInspectable UIImage * _Nullable storyHeaderShareButtonIcon;
/// This property allows you to change the orientation of story groups list
/// seealso:
/// StoryGroupListStyling
@property (nonatomic, copy) IBInspectable NSString * _Nonnull storyGroupListOrientation;
/// This property allows you to change the orientation of story groups list
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable NSInteger storyGroupListSections;
/// This property allows you to change the horizontal padding value between story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable CGFloat storyGroupListHorizontalPaddingBetweenItems;
/// This property allows you to change the vertical padding value between story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable CGFloat storyGroupListVerticalPaddingBetweenItems;
/// This property allows you to change the horizontal edge padding value of the
/// first and last story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable CGFloat storyGroupListHorizontalEdgePadding;
/// This property allows you to change the vertical edge padding value of the
/// first and last story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable CGFloat storyGroupListVerticalEdgePadding;
/// This property allows you to change the shape of the story group icons,
/// their corners and the distance between each other if you set your story
/// group size as custom
/// seealso:
/// StoryGroupIconStyling
@property (nonatomic, strong) StoryGroupIconStyling * _Nonnull storyGroupIconStyling;
/// This property allows you to change the visibility of story group text
/// seealso:
/// StoryGroupTextStyling
@property (nonatomic, strong) StoryGroupTextStyling * _Nonnull storyGroupTextStyling;
/// This property allows you to change the visibility of story view header
/// icon and text.
/// seealso:
/// StoryHeaderStyling
@property (nonatomic, strong) StoryHeaderStyling * _Nonnull storyHeaderStyling;
/// This property allows you to change the distance between the
/// story groups and edge paddings of the first and last story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic, strong) StoryGroupListStyling * _Nonnull storyGroupListStyling;
/// This property allows you to change the IVoD groups seen, unseen border
/// colors and IVoD icon color
/// seealso:
/// StoryGroupListStyling
@property (nonatomic, strong) StoryGroupIconColorStyling * _Nonnull storyGroupIconColorStyling;
/// This property allows you to change the layout direction
@property (nonatomic) enum StorylyLayoutDirection storylyLayoutDirection;
/// If any of the story group is selected as Ivod group type from dashboard,
/// a little camera will appear along with the story group icon. This
/// property allows you to change the background color of this Ivod icon
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupIVodIconColor;
/// This property allows you to use different story groups images for different labels
@property (nonatomic, copy) IBInspectable NSString * _Nonnull storyGroupIconImageThematicLabel;
/// This property allows you to change the language shown in storyly elements.
/// Current supported langeuages are: TR, ES, RU, DE, FR, EN
@property (nonatomic, copy) IBInspectable NSString * _Nonnull languageCode;
/// This property allows you to add custom moments view to the
/// beginning of the storyly bar such as ‘add your story’ or ‘user’s own stories’
@property (nonatomic, copy) NSArray<MomentsItem *> * _Nullable momentsItems;
/// This property allows you to set moments theme to costumize moments views
@property (nonatomic, strong) StorylyMomentsTheme * _Nullable momentsTheme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class UIWindow;

@interface StorylyView (SWIFT_EXTENSION(Storyly))
/// This function allows you to load Storyly when it moves to the current window
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
@end



@interface StorylyView (SWIFT_EXTENSION(Storyly))
/// This function  allows you to refetch the data from network
/// By default you do not need to use this function.
- (void)refresh;
/// This function allows you to open using deeplink uri.
/// \param payload Intent data which includes storyly as host
///
///
/// returns:
/// Success of the operation
- (BOOL)openStoryWithPayload:(NSURL * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to pause the current story
- (void)pause;
/// This function allows you to resume the current story
- (void)resume;
/// This function allows you to dismiss story view.
/// \param animation Dismiss animation can be customized using this parameter
///
/// \param completion Actions to do after dismiss
///
- (void)dismissWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// This function allows you to open the story view.
/// \param animation Opening animation can be customized using this parameter
///
/// \param completion Actions to do after present
///
- (void)presentWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// This function allows you to open your custom external view
/// \param externalActionView External view to show
///
- (void)showExternalActionViewWithExternalActionView:(UIView * _Nonnull)externalActionView;
/// This function dismisses your already open external view
- (void)dismissExternalActionView;
/// This function allows you to specify data of custom template groups (For Objective-C version)
/// \param externalData key/value mappings to match and fill template data
///
///
/// returns:
/// Success of the operation
- (BOOL)setExternalData:(NSArray<NSDictionary *> * _Nonnull)externalData SWIFT_WARN_UNUSED_RESULT;
@end



















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef STORYLY_SWIFT_H
#define STORYLY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Storyly",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class NSString;
@class UIFont;

/// This class represents a custom font in Moments Text Interactive
SWIFT_CLASS("_TtC7Storyly17MomentsCustomFont")
@interface MomentsCustomFont : NSObject
/// Initializer of the MomentsCustomFont
/// \param identifier Custom identifier of the font
///
/// \param font Custom font to use
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier font:(UIFont * _Nonnull)font OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIView;

/// This class defines the parent class of your custom Storyly Moments Views
SWIFT_CLASS_NAMED("MomentsItem")
@interface MomentsItem : NSObject
/// StorylyInit initialization
/// \param momentsView Your moments view to show in Storyly Bar
///
- (nonnull instancetype)initWithMomentsView:(UIView * _Nonnull)momentsView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This data class represents a Moments User provided by you
SWIFT_CLASS_NAMED("MomentsUser")
@interface MomentsUser : NSObject
/// userId Id of the user
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
/// avatarURL avatarURL of the user
@property (nonatomic, readonly, copy) NSString * _Nullable avatarURL;
/// username username of the user
@property (nonatomic, readonly, copy) NSString * _Nullable username;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This data class represents the preview mode of stories.
typedef SWIFT_ENUM_NAMED(NSInteger, PlayMode, "PlayMode", open) {
/// This play mode continues to play all of the remaining story groups in the StorylyView
  PlayModeDefault = 0,
/// This play mode plays all of the remaining stories of the specified story group
  PlayModeStoryGroup = 1,
/// This play mode plays only the specified story
  PlayModeStory = 2,
};

@class STRCartItem;
@class NSNumber;

/// This class represent Cart of Storyly
/// \param items List of STRCartItem objects representing the items added to the cart 
///
/// \param totalPrice A floating-point value indicating the current total price of all the items in the cart. 
///
/// \param oldTotalPrice  A floating-point value representing the old total price of all the items in the cart 
///
/// \param currency  A String value representing the currency of total prices 
///
SWIFT_CLASS_NAMED("STRCart")
@interface STRCart : NSObject
@property (nonatomic, readonly, copy) NSArray<STRCartItem *> * _Nonnull items;
@property (nonatomic, readonly) float totalPrice;
@property (nonatomic, readonly, strong) NSNumber * _Nullable oldTotalPrice;
@property (nonatomic, readonly, copy) NSString * _Nonnull currency;
- (nonnull instancetype)initWithItems:(NSArray<STRCartItem *> * _Nonnull)items totalPrice:(float)totalPrice oldTotalPrice:(NSNumber * _Nullable)oldTotalPrice currency:(NSString * _Nonnull)currency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data class that represents the result of an event. It contains the following properties
/// \param message A string that holds a message or description associated with the event result
///
SWIFT_CLASS_NAMED("STRCartEventResult")
@interface STRCartEventResult : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class STRProductItem;

/// This class represents an individual item in the shopping cart
/// \param item An list of type STRProductItem representing the product associated with this cart item 
///
/// \param quantity An integer value indicating the quantity of this item added to the cart 
///
/// \param totalPrice An integer value representing the current total price of this item 
///
/// \param oldTotalPrice An integer value representing the old total price of this item 
///
SWIFT_CLASS_NAMED("STRCartItem")
@interface STRCartItem : NSObject
@property (nonatomic, readonly, strong) STRProductItem * _Nonnull item;
@property (nonatomic, readonly) NSInteger quantity;
@property (nonatomic, readonly, strong) NSNumber * _Nullable totalPrice;
@property (nonatomic, readonly, strong) NSNumber * _Nullable oldTotalPrice;
- (nonnull instancetype)initWithItem:(STRProductItem * _Nonnull)item quantity:(NSInteger)quantity totalPrice:(NSNumber * _Nullable)totalPrice oldTotalPrice:(NSNumber * _Nullable)oldTotalPrice OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class STRProductVariant;

/// Represents the storyly product
/// \param productId Unique identifier of the product 
///
/// \param productGroupId Unique identifier of the group which the product belongs 
///
/// \param title The title or name of the product 
///
/// \param url The URL associated with the product 
///
/// \param desc The description of the product 
///
/// \param price The original price of the product 
///
/// \param salesPrice The discounted price of the product 
///
/// \param currency The currency in which the price is specified 
///
/// \param imageUrls  A list of URLs pointing to the images associated with the product 
///
/// \param variants  A list of product variants, represented by instances of the STRProductVariant class 
///
SWIFT_CLASS_NAMED("STRProductItem")
@interface STRProductItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull productId;
@property (nonatomic, readonly, copy) NSString * _Nonnull productGroupId;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nullable desc;
@property (nonatomic, readonly) float price;
@property (nonatomic, readonly, strong) NSNumber * _Nullable salesPrice;
@property (nonatomic, readonly, copy) NSString * _Nonnull currency;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable imageUrls;
@property (nonatomic, readonly, copy) NSArray<STRProductVariant *> * _Nullable variants;
- (nonnull instancetype)initWithProductId:(NSString * _Nonnull)productId productGroupId:(NSString * _Nonnull)productGroupId title:(NSString * _Nonnull)title url:(NSString * _Nonnull)url description:(NSString * _Nullable)description price:(float)price salesPrice:(NSNumber * _Nullable)salesPrice currency:(NSString * _Nonnull)currency imageUrls:(NSArray<NSString *> * _Nullable)imageUrls variants:(NSArray<STRProductVariant *> * _Nullable)variants OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the variant of the storyly product
/// \param name The name or label of the variant 
///
/// \param value The value or specific option associated with the variant 
///
SWIFT_CLASS_NAMED("STRProductVariant")
@interface STRProductVariant : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents the share state of story.
typedef SWIFT_ENUM_NAMED(NSInteger, ShareType, "ShareType", open) {
/// Default type of Share State. Share is disabled
  ShareTypeDisabled = 0,
/// Share link
  ShareTypeLink = 1,
/// Share screen shot
  ShareTypeScreenshot = 2,
};

@class StoryMedia;

/// This data class represents a story inside a story group.
SWIFT_CLASS_NAMED("Story")
@interface Story : NSObject
/// ID of the story
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// Title of the story
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Name of the story
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Index of the story among other stories of the story group
@property (nonatomic, readonly) NSInteger index;
/// State of the story that shows whether the story is seen or not
@property (nonatomic, readonly) BOOL seen;
/// Time of the story that user watched
@property (nonatomic, readonly) NSInteger currentTime;
/// Media content of the story
@property (nonatomic, readonly, strong) StoryMedia * _Nonnull media;
/// Story initialization
/// \param id ID of the story
///
/// \param index Index of the story among other stories of the story group
///
/// \param title Title of the story
///
/// \param seen State of the story that shows whether the story is seen or not
///
/// \param currentTime Time of the story that user watched
///
/// \param media Media content of the story
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id index:(NSInteger)index title:(NSString * _Nonnull)title name:(NSString * _Nullable)name seen:(BOOL)seen currentTime:(NSInteger)currentTime media:(StoryMedia * _Nonnull)media OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum StoryComponentType : NSInteger;

/// This parent class represents the interactive components which users are interacted with.
SWIFT_CLASS_NAMED("StoryComponent")
@interface StoryComponent : NSObject
/// Id of the interactive component
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Type of the interactive component
@property (nonatomic, readonly) enum StoryComponentType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents the Comment component.
SWIFT_CLASS_NAMED("StoryCommentComponent")
@interface StoryCommentComponent : StoryComponent
/// Comment text that the user sent
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// StoryCommentComponent initialization
/// \param id Id of the interactive component
///
/// \param text Comment text that the user sent
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
@end


/// This enum represents the type of the interactive components.
typedef SWIFT_ENUM_NAMED(NSInteger, StoryComponentType, "StoryComponentType", open) {
/// Undefined component type
  StoryComponentTypeUndefined = 0,
/// Denotes the type of the component is Quiz
  StoryComponentTypeQuiz = 1,
/// Denotes the type of the component is Poll
  StoryComponentTypePoll = 2,
/// Denotes the type of the component is Emoji
  StoryComponentTypeEmoji = 3,
/// Denotes the type of the component is Rating
  StoryComponentTypeRating = 4,
/// Denotes the type of the component is PromoCode
  StoryComponentTypePromoCode = 5,
/// Denotes the type of the component is SwipeAction
  StoryComponentTypeSwipeAction = 6,
/// Denotes the type of the component is ButtonAction
  StoryComponentTypeButtonAction = 7,
/// Denotes the type of the component is Text
  StoryComponentTypeText = 8,
/// Denotes the type of the component is Image
  StoryComponentTypeImage = 9,
/// Denotes the type of the component is Countdown
  StoryComponentTypeCountdown = 10,
/// Denotes the type of the component is ProductTag
  StoryComponentTypeProductTag = 11,
/// Denotes the type of the component is ProductCard
  StoryComponentTypeProductCard = 12,
/// Denotes the type of the component is ProductList
  StoryComponentTypeProductCatalog = 13,
/// Denotes the type of the component is Comment
  StoryComponentTypeComment = 14,
/// Denotes the type of the component is Video
  StoryComponentTypeVideo = 15,
/// Denotes the type of the component is Vod
  StoryComponentTypeVod = 16,
/// Denotes the type of the component is Link CTA
  StoryComponentTypeLinkCTA = 17,
/// Denotes the type of the component is Image Quiz
  StoryComponentTypeImageQuiz = 18,
};


/// This class does the enum to string conversion of the Story Component
SWIFT_CLASS_NAMED("StoryComponentTypeHelper")
@interface StoryComponentTypeHelper : NSObject
/// This function returns the name of the Storyly event
/// \param event Incoming Storyly event type
///
///
/// returns:
/// String event name
+ (NSString * _Nonnull)storyComponentNameWithComponentType:(enum StoryComponentType)componentType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Emoji component.
SWIFT_CLASS_NAMED("StoryEmojiComponent")
@interface StoryEmojiComponent : StoryComponent
/// List of the emojis in the component
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull emojiCodes;
/// Emoji index that the user selected
@property (nonatomic, readonly) NSInteger selectedEmojiIndex;
/// Custom payload for this emoji if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryEmojiComponent initialization
/// \param id Id of the interactive component
///
/// \param emojiCodes List of the emojis in the component
///
/// \param selectedEmojiIndex Emoji index that the user selected
///
/// \param customPayload Custom payload for this emoji if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id emojiCodes:(NSArray<NSString *> * _Nonnull)emojiCodes selectedEmojiIndex:(NSInteger)selectedEmojiIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;
enum StoryGroupType : NSInteger;

/// This class represents a story group in the StorylyView.
SWIFT_CLASS_NAMED("StoryGroup")
@interface StoryGroup : NSObject
/// ID of the story group
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;
/// Title of the story group
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// URL of the story group icon image
@property (nonatomic, readonly, copy) NSURL * _Nullable iconUrl;
/// URLs of different the story group icon themes
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSURL *> * _Nullable thematicIconUrls;
/// URL of the story group cover image
@property (nonatomic, readonly, copy) NSURL * _Nullable coverUrl;
/// Order index of the story group
@property (nonatomic, readonly) NSInteger index;
/// State of the story group that shows whether all of the stories are seen or not
@property (nonatomic, readonly) BOOL seen;
/// List of stories in the story group
@property (nonatomic, readonly, copy) NSArray<Story *> * _Nonnull stories;
/// Pin status of the story group that shows whether group is pinned or not
@property (nonatomic, readonly) BOOL pinned;
/// Type of the story group
@property (nonatomic, readonly) enum StoryGroupType type;
/// Moments User of this group
@property (nonatomic, readonly, strong) MomentsUser * _Nullable momentsUser;
/// StoryGroup initialization
/// \param id ID of the story group
///
/// \param title Title of the story group
///
/// \param iconUrl URL of the story group icon image
///
/// \param thematicIconUrls URLs of different the story group icon themes
///
/// \param coverUrl URL of the story group cover image
///
/// \param index Order index of the story group
///
/// \param seen State of the story group that shows whether all of the stories are seen or not
///
/// \param stories List of stories in the story group
///
/// \param pinned Pin status of the story group that shows whether group is pinned or not
///
/// \param type Type of the story group
///
/// \param momentsUser Moments User of this group
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title iconUrl:(NSURL * _Nullable)iconUrl thematicIconUrls:(NSDictionary<NSString *, NSURL *> * _Nullable)thematicIconUrls coverUrl:(NSURL * _Nullable)coverUrl index:(NSInteger)index seen:(BOOL)seen stories:(NSArray<Story *> * _Nonnull)stories pinned:(BOOL)pinned type:(enum StoryGroupType)type momentsUser:(MomentsUser * _Nullable)momentsUser OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents available animations that can be set for customization.
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupAnimation, "StoryGroupAnimation", open) {
/// Disables animation
  StoryGroupAnimationDisabled = 0,
/// Default animation
  StoryGroupAnimationBorderRotation = 1,
};

@class UIColor;

/// This property allows you to change the IVoD groups seen, unseen border
/// colors and IVoD icon color
SWIFT_CLASS("_TtC7Storyly26StoryGroupIconColorStyling")
@interface StoryGroupIconColorStyling : NSObject
/// This property allows you to change the border color of the IVoD story group
/// icons which are watched by the user.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyGroupIVodIconBorderColorSeen;
/// This property allows you to change the border color of the IVoD story
/// group icons which are unwatched by the user.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyGroupIVodIconBorderColorNotSeen;
/// If any of the story group is selected as IVoD group type from dashboard,
/// a little camera will appear along with the story group icon. This
/// property allows you to change the background color of this IVoD icon
@property (nonatomic, strong) UIColor * _Nonnull storyGroupIVodIconColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents styling of story group icons
SWIFT_CLASS_NAMED("StoryGroupIconStyling")
@interface StoryGroupIconStyling : NSObject
/// Height of the story group icon
@property (nonatomic) CGFloat height;
/// Width of the story group icon
@property (nonatomic) CGFloat width;
/// Corner radius value of the story group icon
@property (nonatomic) CGFloat cornerRadius;
/// StoryGroupIconStyling initialization
/// \param height Height of the story group icon
///
/// \param width Width of the story group icon
///
/// \param cornerRadius Corner radius value of the story group icon
///
- (nonnull instancetype)initWithHeight:(CGFloat)height width:(CGFloat)width cornerRadius:(CGFloat)cornerRadius OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum represents orientation of story group list
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupListOrientation, "StoryGroupListOrientation", open) {
/// Horizontal orientation of story group list
  StoryGroupListOrientationHorizontal = 0,
/// Vertical orientation of story group list
  StoryGroupListOrientationVertical = 1,
};


/// This data class represents styling of story group list
SWIFT_CLASS_NAMED("StoryGroupListStyling")
@interface StoryGroupListStyling : NSObject
/// Orientation value of story group list
@property (nonatomic) enum StoryGroupListOrientation orientation;
/// Based on orientation horizontal orientation row count or vertical orientation colum count of story group list
@property (nonatomic) NSInteger sections;
/// Edge padding value of the first and last story groups for orientation horizontal
@property (nonatomic) CGFloat horizontalEdgePadding;
/// Edge padding value of the first and last story groups for orientation vertical
@property (nonatomic) CGFloat verticalEdgePadding;
/// Horizontal padding value between story groups
@property (nonatomic) CGFloat horizontalPaddingBetweenItems;
/// Vertical padding value between story groups
@property (nonatomic) CGFloat verticalPaddingBetweenItems;
/// StoryGroupIconStyling initialization
/// \param orientation Orientation value of story group list
///
/// \param sections Based on orientation horizontal orientation row count or vertical orientation colum count of story group list
///
/// \param horizontalEdgePadding Edge padding value of the first and last story groups for orientation horizontal
///
/// \param verticalEdgePadding Edge padding value of the first and last story groups for orientation vertical
///
/// \param horizontalPaddingBetweenItems Horizontal padding value between story groups
///
/// \param verticalPaddingBetweenItems Vertical padding value between story groups
///
- (nonnull instancetype)initWithOrientation:(enum StoryGroupListOrientation)orientation sections:(NSInteger)sections horizontalEdgePadding:(CGFloat)horizontalEdgePadding verticalEdgePadding:(CGFloat)verticalEdgePadding horizontalPaddingBetweenItems:(CGFloat)horizontalPaddingBetweenItems verticalPaddingBetweenItems:(CGFloat)verticalPaddingBetweenItems OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum represents available story group sizes that be can set for customization
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupSize, "StoryGroupSize", open) {
/// Small group size which is the samllest and does not have story group text
  StoryGroupSizeSmall = 0,
/// Large group size which is the default group size of the Storyly
  StoryGroupSizeLarge = 1,
/// Custom group size which has customizable features
  StoryGroupSizeCustom = 2,
};


/// This data class represents styling of story group texts
SWIFT_CLASS_NAMED("StoryGroupTextStyling")
@interface StoryGroupTextStyling : NSObject
/// Visibility of the story group text
@property (nonatomic) BOOL isVisible;
/// Color of the seen story group text
@property (nonatomic, strong) UIColor * _Nonnull colorSeen;
/// Color of the not seen story group text
@property (nonatomic, strong) UIColor * _Nonnull colorNotSeen;
/// Font of the story group text
@property (nonatomic, strong) UIFont * _Nullable font;
/// Number of lines of the story group text
@property (nonatomic) NSInteger lines;
/// StoryGroupTextStyling initialization
/// \param isVisible Visibility of the story group text
///
/// \param color Color of the story group text
///
/// \param font Font of the story group text
///
/// \param lines Number of lines of the story group text
///
- (nonnull instancetype)initWithIsVisible:(BOOL)isVisible colorSeen:(UIColor * _Nonnull)colorSeen colorNotSeen:(UIColor * _Nonnull)colorNotSeen font:(UIFont * _Nullable)font lines:(NSInteger)lines OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents the type of the story group.
typedef SWIFT_ENUM_NAMED(NSInteger, StoryGroupType, "StoryGroupType", open) {
/// Default type for the story group type
  StoryGroupTypeDefault = 0,
/// Denotes story group type is Interactive Video on Demand
  StoryGroupTypeIVod = 1,
/// Denotes story group type is Ad
  StoryGroupTypeAd = 2,
/// Denotes story group type is Moments
  StoryGroupTypeMomentsDefault = 3,
/// Denotes story group type is Moments Block
  StoryGroupTypeMomentsBlock = 4,
};

@class NSCoder;

/// This class defines the parent class of the custom styling StoryGroupView classes
SWIFT_CLASS("_TtC7Storyly14StoryGroupView")
@interface StoryGroupView : UIView
/// This function fills the StoryGroupView components
- (void)populateViewWithStoryGroup:(StoryGroup * _Nullable)storyGroup;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This protocol defines the structure of StoryGroupViewFactory
SWIFT_PROTOCOL("_TtP7Storyly21StoryGroupViewFactory_")
@protocol StoryGroupViewFactory
/// This function is called when a new view is requested
- (StoryGroupView * _Nonnull)createView SWIFT_WARN_UNUSED_RESULT;
/// This function is called when the size of the StoryGroupView is requested
- (CGSize)getSize SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

/// This data class represents styling of story view header
SWIFT_CLASS("_TtC7Storyly18StoryHeaderStyling")
@interface StoryHeaderStyling : NSObject
/// Visibility of the story view header text
@property (nonatomic) BOOL isTextVisible;
/// Visibility of the story view header icon
@property (nonatomic) BOOL isIconVisible;
/// Visibility of the story view header close button
@property (nonatomic) BOOL isCloseButtonVisible;
/// UIImage of the story view header close button
@property (nonatomic, strong) UIImage * _Nullable closeButtonIcon;
/// UIImage of the story view header share button
@property (nonatomic, strong) UIImage * _Nullable shareButtonIcon;
/// StoryHeaderStyling initialization
/// \param isTextVisible Visibility of the story view header text
///
/// \param isIconVisible Visibility of the story view header icon
///
/// \param isCloseButtonVisible Visibility of the story view header close button
///
/// \param closeButtonIcon UIImage of the story view header close button
///
/// \param shareButtonIcon UIImage of the story view header share button
///
- (nonnull instancetype)initWithIsTextVisible:(BOOL)isTextVisible isIconVisible:(BOOL)isIconVisible isCloseButtonVisible:(BOOL)isCloseButtonVisible closeButtonIcon:(UIImage * _Nullable)closeButtonIcon shareButtonIcon:(UIImage * _Nullable)shareButtonIcon OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents the Image Quiz component.
SWIFT_CLASS_NAMED("StoryImageQuizComponent")
@interface StoryImageQuizComponent : StoryComponent
/// Title of the image quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of texts of the options if exists, otherwise list of image urls of image quiz
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable options;
/// Index of the right answer if exists
@property (nonatomic, readonly, strong) NSNumber * _Nullable rightAnswerIndex;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// Custom payload for this image quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryImageQuizComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the image quiz if exists
///
/// \param options List of texts of the options if exists, otherwise list of image urls of image quiz
///
/// \param rightAnswerIndex Index of the right answer if exists
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this image quiz if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nullable)options rightAnswerIndex:(NSNumber * _Nullable)rightAnswerIndex selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

enum StoryType : NSInteger;

/// This data class represents the media of a story.
SWIFT_CLASS_NAMED("StoryMedia")
@interface StoryMedia : NSObject
/// Type of the story
@property (nonatomic, readonly) enum StoryType type;
/// List of story components in the story
@property (nonatomic, readonly, copy) NSArray<StoryComponent *> * _Nullable storyComponentList;
/// List of action urls in the story
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable actionUrlList;
/// URL which the user has just interacted with
@property (nonatomic, readonly, copy) NSString * _Nullable actionUrl;
/// URL of the preview image of the story
@property (nonatomic, copy) NSURL * _Nullable previewUrl;
/// StoryMedia initialization
/// \param type Type of the story
///
/// \param storyComponentList List of story components in the story
///
/// \param actionUrlList List of action urls in the story
///
/// \param actionUrl URL which the user has just interacted with
///
/// \param previewUrl URL of the preview image of the story
///
- (nonnull instancetype)initWithType:(enum StoryType)type storyComponentList:(NSArray<StoryComponent *> * _Nullable)storyComponentList actionUrlList:(NSArray<NSString *> * _Nullable)actionUrlList actionUrl:(NSString * _Nullable)actionUrl previewUrl:(NSURL * _Nullable)previewUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents the Poll component.
SWIFT_CLASS_NAMED("StoryPollComponent")
@interface StoryPollComponent : StoryComponent
/// Title of the poll if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of options in the poll
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull options;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// Custom payload for this poll if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryPollComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the poll if exists
///
/// \param options List of options in the poll
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this poll if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the PromoCode component.
SWIFT_CLASS_NAMED("StoryPromoCodeComponent")
@interface StoryPromoCodeComponent : StoryComponent
/// PromoCode text that the user copied
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/// StoryRatingComponent initialization
/// \param id Id of the interactive component
///
/// \param text PromoCode text that the user copied
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Quiz component.
SWIFT_CLASS_NAMED("StoryQuizComponent")
@interface StoryQuizComponent : StoryComponent
/// Title of the quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// List of options in the quiz
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull options;
/// Index of the right answer if exists
@property (nonatomic, readonly, strong) NSNumber * _Nullable rightAnswerIndex;
/// Option index that the user selected
@property (nonatomic, readonly) NSInteger selectedOptionIndex;
/// Custom payload for this quiz if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryQuizComponent initialization
/// \param id Id of the interactive component
///
/// \param title Title of the quiz if exists
///
/// \param options List of options in the quiz
///
/// \param rightAnswerIndex Index of the right answer if exists
///
/// \param selectedOptionIndex Option index that the user selected
///
/// \param customPayload Custom payload for this quiz if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id title:(NSString * _Nonnull)title options:(NSArray<NSString *> * _Nonnull)options rightAnswerIndex:(NSNumber * _Nullable)rightAnswerIndex selectedOptionIndex:(NSInteger)selectedOptionIndex customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents the Rating component.
SWIFT_CLASS_NAMED("StoryRatingComponent")
@interface StoryRatingComponent : StoryComponent
/// Emoji code as the thumb emoji
@property (nonatomic, readonly, copy) NSString * _Nonnull emojiCode;
/// Rating value which user rated in the component
@property (nonatomic, readonly) NSInteger rating;
/// Custom payload for this rating if exists
@property (nonatomic, readonly, copy) NSString * _Nullable customPayload;
/// StoryRatingComponent initialization
/// \param id Id of the interactive component
///
/// \param emojiCode Emoji code as the thumb emoji
///
/// \param rating Rating value which user rated in the component
///
/// \param customPayload Custom payload for this rating if exists
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id emojiCode:(NSString * _Nonnull)emojiCode rating:(NSInteger)rating customPayload:(NSString * _Nullable)customPayload OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum represents the type of a story content
typedef SWIFT_ENUM_NAMED(NSInteger, StoryType, "StoryType", open) {
/// Unidentified story type
  StoryTypeUnknown = 0,
/// Denotes the type of the story is Image
  StoryTypeImage = 1,
/// Denotes the type of the story is Video
  StoryTypeVideo = 2,
/// Denotes the type of the story is Interactive Video on Demand
  StoryTypeVod = 3,
/// Denotes the type of the story is an Ad View
  StoryTypeAd = 4,
};

@class UITouch;

/// This protocol represents an ad view that can be opened between stories
SWIFT_PROTOCOL("_TtP7Storyly13StorylyAdView_")
@protocol StorylyAdView
/// Use this field to dispatch custom action clicked event
@property (nonatomic, copy) void (^ _Nullable onActionClicked)(void);
/// Implement this method to return the ad view
- (UIView * _Nonnull)getView SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return the icon url of the ad view
///
/// returns:
/// Icon URL of the ad view
- (NSURL * _Nonnull)getIcon SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return the title of the ad view
///
/// returns:
/// Title of the ad view
- (NSString * _Nonnull)getTitle SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to return the data of the ad view
///
/// returns:
/// Title of the ad view
- (NSDictionary<NSString *, id> * _Nonnull)getCustomData SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to do your destroy operations
- (void)destroy;
/// Implement this method to do your loading operations
///
/// returns:
/// Duration of the ad view
- (NSInteger)load SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to pause your ad view
- (void)pause;
/// Implement this method to reset operations
- (void)reset;
/// Implement this method to resume your ad view
- (void)resume;
/// Override this method to set layers, for example CTA button
- (void)setLayersWithLayers:(NSDictionary<NSString *, UIView *> * _Nonnull)layers;
/// Override this method to enable custom clicable views
- (BOOL)checkHitWithTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


/// This protocol is used to load the ad view
SWIFT_PROTOCOL("_TtP7Storyly21StorylyAdViewListener_")
@protocol StorylyAdViewListener
/// Implement this method to do loading operations of your ad view
- (void)onLoad:(id <StorylyAdView> _Nonnull)adView;
@end


/// This protocol is used as an entrance for the ad view
SWIFT_PROTOCOL("_TtP7Storyly21StorylyAdViewProvider_")
@protocol StorylyAdViewProvider
/// Implement this method to do your operations when ad view is requested
- (void)onRequest:(id <StorylyAdViewListener> _Nonnull)adViewListener :(CGRect)frame;
@end

/// This enum represents the source of the storyly data
typedef SWIFT_ENUM_NAMED(NSInteger, StorylyDataSource, "StorylyDataSource", open) {
/// Stories in Storyly API
  StorylyDataSourceAPI = 0,
/// Stories in Storyly Moments API
  StorylyDataSourceMomentsAPI = 1,
/// Stories in local device cache
  StorylyDataSourceLocal = 2,
/// Stories with user specific data
  StorylyDataSourceUserData = 3,
/// Stories with product specific data
  StorylyDataSourceProductData = 4,
};

@class StorylyView;
@class UIViewController;
enum StorylyEvent : NSInteger;

/// This delegate  represents the class which notifies application when an event
/// occurs in StorylyView.
SWIFT_PROTOCOL_NAMED("StorylyDelegate")
@protocol StorylyDelegate
@optional
/// This function will let you know that Storyly has completed
/// its network operations and story group list has just shown to the user.
/// \param storylyView StorylyView instance in which storyly is loaded
///
/// \param storyGroupList List of story groups when storyly is loaded
///
- (void)storylyLoaded:(StorylyView * _Nonnull)storylyView storyGroupList:(NSArray<StoryGroup *> * _Nonnull)storyGroupList SWIFT_UNAVAILABLE_MSG("This function is removed in v1.18.0; please use the storylyLoaded with dataSource parameter");
/// This function will let you know that Storyly has completed
/// its network operations and story group list has just shown to the user.
/// \param storylyView StorylyView instance in which storyly is loaded
///
/// \param storyGroupList List of story groups when storyly is loaded
///
/// \param dataSource Source of the storyly data
///
- (void)storylyLoaded:(StorylyView * _Nonnull)storylyView storyGroupList:(NSArray<StoryGroup *> * _Nonnull)storyGroupList dataSource:(enum StorylyDataSource)dataSource;
/// This function will let you know that Storyly has completed
/// its network operations and had a problem while fetching your stories
/// \param storylyView StorylyView instance in which storyly is failed to load
///
/// \param errorMessage Error message of the load fail reason
///
- (void)storylyLoadFailed:(StorylyView * _Nonnull)storylyView errorMessage:(NSString * _Nonnull)errorMessage;
/// This function will notify your application in case of Swipe Up or CTA Button action.
/// \param storylyView StorylyView instance in which action is occurred
///
/// \param rootViewController RootViewController of the story view
///
/// \param story Story in which action is occurred
///
- (void)storylyActionClicked:(StorylyView * _Nonnull)storylyView rootViewController:(UIViewController * _Nonnull)rootViewController story:(Story * _Nonnull)story;
/// This function will let you know that stories are started to be presented to the users.
/// \param storylyView StorylyView instance in which stories are started to shown
///
- (void)storylyStoryPresented:(StorylyView * _Nonnull)storylyView;
/// This function will let you know that programmatic story show are failed.
/// \param storylyView StorylyView instance that event occurred
///
/// \param errorMessage Error message of the fail reason
///
- (void)storylyStoryPresentFailed:(StorylyView * _Nonnull)storylyView errorMessage:(NSString * _Nonnull)errorMessage;
/// This function will let you know that user dismissed the current story while watching it.
/// \param storylyView StorylyView instance in which the story is dismissed
///
- (void)storylyStoryDismissed:(StorylyView * _Nonnull)storylyView;
/// This function will allow you to get reactions of users from specific interactive components.
/// \param storylyView StorylyView instance in which the user interacted with a component
///
/// \param storyGroup Story group in which the user interacted with a component
///
/// \param story Story in which the user interacted with a component
///
/// \param storyComponent Interactive component that user is interacted with
///
- (void)storylyUserInteracted:(StorylyView * _Nonnull)storylyView storyGroup:(StoryGroup * _Nonnull)storyGroup story:(Story * _Nonnull)story storyComponent:(StoryComponent * _Nonnull)storyComponent;
/// This function will notify you about all Storyly events and let you to send these events to
/// specific data platforms
/// \param storylyView StorylyView instance in which the event is received
///
/// \param event Storyly event type which is received
///
/// \param storyGroup Story group in which the event is received
///
/// \param story Story in which the event is received
///
/// \param storyComponent Interactive story component if event is related with a story component
///
- (void)storylyEvent:(StorylyView * _Nonnull)storylyView event:(enum StorylyEvent)event storyGroup:(StoryGroup * _Nullable)storyGroup story:(Story * _Nullable)story storyComponent:(StoryComponent * _Nullable)storyComponent;
@end

/// This enum represents all possible events that can be sent from Storyly
typedef SWIFT_ENUM(NSInteger, StorylyEvent, open) {
/// Sent when a story group is opened by user selection, programmatical selection and deeplink
  StorylyEventStoryGroupOpened = 0,
/// Sent when a story group is opened by user selection
  StorylyEventStoryGroupUserOpened = 1,
/// Sent when a story group is opened using a deeplink
  StorylyEventStoryGroupDeepLinkOpened = 2,
/// Sent when a story group is opened programmatically
  StorylyEventStoryGroupProgrammaticallyOpened = 3,
/// Sent when a story group is completed
  StorylyEventStoryGroupCompleted = 4,
/// Sent when a user does previous swipe gesture while watching a story in a story group
  StorylyEventStoryGroupPreviousSwiped = 5,
/// Sent when a user does next swipe gesture while watching a story in a story group
  StorylyEventStoryGroupNextSwiped = 6,
/// Sent when a user dismisses or clicks the close button to close the story group
  StorylyEventStoryGroupClosed = 7,
/// Sent after a while when a user sees a story as an indicator that shows story is watched
  StorylyEventStoryImpression = 8,
/// Sent when a story is loaded
  StorylyEventStoryViewed = 9,
/// Sent after a story is finished
  StorylyEventStoryCompleted = 10,
/// Sent when a user does previous click tap while watching a story
  StorylyEventStoryPreviousClicked = 11,
/// Sent when a user does next click tap while watching a story
  StorylyEventStoryNextClicked = 12,
/// Sent when a story is paused
  StorylyEventStoryPaused = 13,
/// Sent when a story is resumed
  StorylyEventStoryResumed = 14,
/// Sent when a story share url is generated and clicked to a sharing way
  StorylyEventStoryShared = 15,
/// Sent when a user clicks to interactive CTA button or does a swipe up action
  StorylyEventStoryCTAClicked = 16,
/// Sent when a user clicks to an emoji on interactive emoji list
  StorylyEventStoryEmojiClicked = 17,
/// Sent when a user answers a poll
  StorylyEventStoryPollAnswered = 18,
/// Sent when a user answers a quiz
  StorylyEventStoryQuizAnswered = 19,
/// Sent when a user answers a image quiz
  StorylyEventStoryImageQuizAnswered = 20,
/// Sent when a user adds reminder to a interactive countdown component
  StorylyEventStoryCountdownReminderAdded = 21,
/// Sent when a user removes the reminder from a interactive countdown component
  StorylyEventStoryCountdownReminderRemoved = 22,
/// Sent when a user rates in interactive rating component
  StorylyEventStoryRated = 23,
/// Sent when a user sees an interactive component
  StorylyEventStoryInteractiveImpression = 24,
/// Sent when a user clikcs a product tag point
  StorylyEventStoryProductTagExpanded = 25,
/// Sent when a user clicks a product expanded area
  StorylyEventStoryProductTagClicked = 26,
/// Sent when a user clicks a product card area
  StorylyEventStoryProductCardClicked = 27,
/// Sent when a user copy a promo code
  StorylyEventStoryPromoCodeCopied = 28,
/// Sent when a user sends a comment
  StorylyEventStoryCommentSent = 29,
/// Sent when a user opens input area
  StorylyEventStoryCommentInputOpened = 30,
/// Sent when a user closes input area
  StorylyEventStoryCommentInputClosed = 31,
/// Sent when a user clicks replay button in interactive video on demand story
  StorylyEventStorylyIVodReplayButtonClicked = 32,
/// Sent when a user seeks the video in interactive video on demand story
  StorylyEventStorylyIVodSeeked = 33,
/// Sent when a user likes a Moments story
  StorylyEventStoryLiked = 34,
/// Sent when a user unlikes a Moments story
  StorylyEventStoryUnliked = 35,
/// Sent when a product added
  StorylyEventStoryProductAdded = 36,
/// Sent when a product updated
  StorylyEventStoryProductUpdated = 37,
/// Sent when product removed
  StorylyEventStoryProductRemoved = 38,
/// Sent when checkout button clicked
  StorylyEventStoryCheckoutButtonClicked = 39,
/// Sent when cart button clicked from success sheet
  StorylyEventStoryCartButtonClicked = 40,
/// Sent when cart view clicked
  StorylyEventStoryCartViewClicked = 41,
/// Sent  when product catalog is clicked
  StorylyEventStoryProductCatalogClicked = 42,
/// Sent  when product selected
  StorylyEventStoryProductSelected = 43,
};


/// This class does the enum to string conversion of the Storyly events
SWIFT_CLASS("_TtC7Storyly18StorylyEventHelper")
@interface StorylyEventHelper : NSObject
/// This function returns the name of the Storyly event
/// \param event Incoming Storyly event type
///
///
/// returns:
/// String event name
+ (NSString * _Nonnull)storylyEventNameWithEvent:(enum StorylyEvent)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class StorylySegmentation;

/// This class triggers initialization of Storyly
SWIFT_CLASS_NAMED("StorylyInit")
@interface StorylyInit : NSObject
@property (nonatomic) BOOL isProductFallbackEnabled;
@property (nonatomic) BOOL isProductCartEnabled;
/// storylyPayload information to get moments groups for the user
@property (nonatomic, copy) NSString * _Nullable storylyPayload;
/// StorylySegmentation instance to target story groups for the user
@property (nonatomic, strong) StorylySegmentation * _Nonnull segmentation;
/// User specific information to fill the story/story group data
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull userData;
/// StorylyInit initialization
/// \param storylyId Instance token from Storyly dashboard
///
- (nonnull instancetype)initWithStorylyId:(NSString * _Nonnull)storylyId OBJC_DESIGNATED_INITIALIZER;
/// StorylyInit initialization
/// \param storylyId Instance token from Storyly dashboard
///
/// \param segmentation StorylySegmentation instance to target story groups for the user
///
/// \param customParameter Custom parameter for analytical purposes
///
/// \param isTestMode IsTestMode defines whether it is a test device or not. If true, test groups are sent from the server.
///
/// \param storylyPayload User payload to use for Moments by Storyly
///
/// \param userData User specific information to fill the story/story group data
///
- (nonnull instancetype)initWithStorylyId:(NSString * _Nonnull)storylyId segmentation:(StorylySegmentation * _Nonnull)segmentation customParameter:(NSString * _Nullable)customParameter isTestMode:(BOOL)isTestMode storylyPayload:(NSString * _Nullable)storylyPayload userData:(NSDictionary<NSString *, NSString *> * _Nonnull)userData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This enum class represents available layout direction that be can set for customization
typedef SWIFT_ENUM_NAMED(NSInteger, StorylyLayoutDirection, "StorylyLayoutDirection", open) {
/// Left-to-right layout direction
  StorylyLayoutDirectionLTR = 0,
/// Right-to-left layout direction
  StorylyLayoutDirectionRTL = 1,
};


/// This protocol represents a loading view that you can inherit to
/// customize the loading view of stories
SWIFT_PROTOCOL("_TtP7Storyly18StorylyLoadingView_")
@protocol StorylyLoadingView
/// Implement this method to return the loading view
- (UIView * _Nonnull)getView SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to include your show actions
- (void)show;
/// Implement this method to include your hide actions
- (void)hide;
@end


/// This delegate represents the class which notifies application when an event
/// occurs in Storyly Moments.
SWIFT_PROTOCOL("_TtP7Storyly22StorylyMomentsDelegate_")
@protocol StorylyMomentsDelegate
@optional
/// This function will let you know that a user clicked header icon of a Storyly Moments story
/// \param storylyView StorylyView instance in which storyly is loaded
///
/// \param storyGroup Story group in which the user clicked the icon
///
/// \param story Story in which the user user clicked the icon
///
- (void)storyHeaderClicked:(StorylyView * _Nonnull)storylyView storyGroup:(StoryGroup * _Nullable)storyGroup story:(Story * _Nullable)story;
@end


SWIFT_CLASS_NAMED("StorylyMomentsIconStyling")
@interface StorylyMomentsIconStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Builder")
@interface StorylyMomentsIconStylingBuilder : NSObject
/// Sets custom image to like icon. Max size of corresponding view is 20x20px.
/// Scale type of the view is ContentMode.scaleAspectFit.
- (StorylyMomentsIconStylingBuilder * _Nonnull)setStoryLikeIconWithLikeIcon:(UIImage * _Nullable)likeIcon unlikeIcon:(UIImage * _Nullable)unlikeIcon SWIFT_WARN_UNUSED_RESULT;
/// Sets custom image to like animation icon.
/// Scale type of the view is ContentMode.scaleAspectFit.
- (StorylyMomentsIconStylingBuilder * _Nonnull)setStoryLikeAnimationIconWithIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
/// Sets custom image to view count icon. Max size of corresponding view is 20x20px.
/// Scale type of the view is ContentMode.scaleAspectFit.
- (StorylyMomentsIconStylingBuilder * _Nonnull)setStoryViewCountIconWithIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
/// Sets custom image to story options icon. Max size of corresponding view is 32x32px.
/// Scale type of the view is ContentMode.scaleAspectFit.
- (StorylyMomentsIconStylingBuilder * _Nonnull)setStoryOptionsIconWithIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
- (StorylyMomentsIconStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class holds the config properties of Moments Link CTA Interactive
SWIFT_CLASS_NAMED("StorylyMomentsLinkCTAStyling")
@interface StorylyMomentsLinkCTAStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class of StorylyMomentsLinkCTAStyling
SWIFT_CLASS_NAMED("Builder")
@interface StorylyMomentsLinkCTAStylingBuilder : NSObject
/// This function allows you to change the link text color of the Moments Link CTA view
/// \param color Color to set
///
///
/// returns:
/// StorylyMomentsLinkCTAStyling instance
- (StorylyMomentsLinkCTAStylingBuilder * _Nonnull)setLinkTextColorWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// This function builds StorylyMomentsLinkCTAStyling with the current properties
///
/// returns:
/// StorylyMomentsLinkCTAStyling instance
- (StorylyMomentsLinkCTAStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class holds the config properties of Moments Text Interactive
SWIFT_CLASS_NAMED("StorylyMomentsTextStyling")
@interface StorylyMomentsTextStyling : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class of MomentsTextConfigBuilder
SWIFT_CLASS_NAMED("Builder")
@interface StorylyMomentsTextStylingBuilder : NSObject
/// This function allows you to set different fonts that your users will be able to select in text interactive
/// \param fonts Fonts to show to your users while creating a text interactive
///
///
/// returns:
/// Current builder
- (StorylyMomentsTextStylingBuilder * _Nonnull)setCustomFontsWithFonts:(NSArray<MomentsCustomFont *> * _Nonnull)fonts SWIFT_WARN_UNUSED_RESULT;
/// This function builds StorylyMomentsTextStyling with the current properties
///
/// returns:
/// StorylyMomentsTextStyling instance
- (StorylyMomentsTextStyling * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("StorylyMomentsTheme")
@interface StorylyMomentsTheme : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Builder")
@interface StorylyMomentsThemeBuilder : NSObject
/// This function allows you to set custom icons to Moments
/// \param iconStyling StorylyMomentsIconStyling instance to set 
///
- (StorylyMomentsThemeBuilder * _Nonnull)setIconStylingWithIconStyling:(StorylyMomentsIconStyling * _Nonnull)iconStyling SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to customize Link CTA view
/// \param linkCTAStyling StorylyMomentsLinkCTAStyling instance to set 
///
- (StorylyMomentsThemeBuilder * _Nonnull)setLinkCtaStylingWithLinkCTAStyling:(StorylyMomentsLinkCTAStyling * _Nonnull)linkCTAStyling SWIFT_WARN_UNUSED_RESULT;
- (StorylyMomentsThemeBuilder * _Nonnull)setTextStylingWithTextStyling:(StorylyMomentsTextStyling * _Nonnull)textStyling SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to see the Moments story view count,like count and avatars of the last 3 liked users
/// It is true by default.
/// \param isVisible Show moments statistics if set to true 
///
- (StorylyMomentsThemeBuilder * _Nonnull)setMomentsUserAnalyticsVisibilityWithIsVisible:(BOOL)isVisible SWIFT_WARN_UNUSED_RESULT;
- (StorylyMomentsTheme * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This delegate  represents the class which notifies application when an product related event
/// occurs in StorylyView.
SWIFT_PROTOCOL_NAMED("StorylyProductDelegate")
@protocol StorylyProductDelegate
@optional
/// This function will notify you to get ids of products
/// \param storylyView StorylyView instance in which the user interacted with a component
///
/// \param productIds Found product ids in stories
///
- (void)storylyHydration:(StorylyView * _Nonnull)storylyView productIds:(NSArray<NSString *> * _Nonnull)productIds;
/// This function will notify you about all Storyly events and let you to send these events to
/// specific data platforms
/// \param storylyView StorylyView instance in which the event is received
///
/// \param event Storyly event type which is received
///
- (void)storylyEvent:(StorylyView * _Nonnull)storylyView event:(enum StorylyEvent)event;
/// This function will notify you about updates the cart in a StorylyView component
/// \param storylyView StorylyView instance in which the event is received
///
/// \param event Storyly event type which is received
///
/// \param cart Contains information about the items in the cart
///
/// \param change Represents the item being changed in the cart.
///
/// \param onSuccess It represents a callback function that will be executed if the “update cart” operation is successful
///
/// \param onFail It represents a callback function that will be executed if the “update cart” operation fails
///
- (void)storylyUpdateCartEventWithStorylyView:(StorylyView * _Nonnull)storylyView event:(enum StorylyEvent)event cart:(STRCart * _Nullable)cart change:(STRCartItem * _Nullable)change onSuccess:(void (^ _Nullable)(STRCart * _Nonnull))onSuccess onFail:(void (^ _Nullable)(STRCartEventResult * _Nonnull))onFail;
@end


/// This class is used in Storyly initialization if you are planning to target
/// labeled story groups which are set in dashboard
SWIFT_CLASS_NAMED("StorylySegmentation")
@interface StorylySegmentation : NSObject
/// StorylySegmentation initialization
/// \param segments Label set to target story groups
///
- (nonnull instancetype)initWithSegments:(NSSet<NSString *> * _Nullable)segments OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class is the main view of Storyly.
SWIFT_CLASS_NAMED("StorylyView")
@interface StorylyView : UIView
/// This property triggers StorylyView initialization
@property (nonatomic, strong) StorylyInit * _Nonnull storylyInit;
/// RootviewController of the StorylyView
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
/// Delegate of the StorylyView which will notify you when an event occurs in StorylyView.
@property (nonatomic, weak) id <StorylyDelegate> _Nullable delegate;
/// Delegate of the StorylyView which will notify you when an product related event occurs in StorylyView.
@property (nonatomic, weak) id <StorylyProductDelegate> _Nullable productDelegate;
/// Delegate of the StorylyMoments which will notify you when an event occurs in StorylyMoments.
@property (nonatomic, weak) id <StorylyMomentsDelegate> _Nullable momentsDelegate;
/// This property will allow you to add ad view between stories
@property (nonatomic, weak) id <StorylyAdViewProvider> _Nullable storylyAdViewProvider;
/// This property will allow you to add custom loading view
@property (nonatomic, weak) id <StorylyLoadingView> _Nullable storylyLoadingView;
/// This property will allow you to add custom story group view
@property (nonatomic, weak) id <StoryGroupViewFactory> _Nullable storyGroupViewFactory;
/// This property will allow you to customize share url
@property (nonatomic, copy) NSString * _Nullable storylyShareUrl;
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable accessibilityIdentifier;
/// This property allows you to change the border color of the story group
/// icons which are watched by the user.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyGroupIconBorderColorSeen;
/// This property allows you to change the border color of the story
/// group icons which are unwatched by the user.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyGroupIconBorderColorNotSeen;
/// This property allows you to change the background color of the story group icon
/// which is shown to the user as skeleton view till the stories are loaded
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupIconBackgroundColor;
/// This property allows you to change the text color of the story group
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupTextColorSeen;
/// This property allows you to change the text color of the story group
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupTextColorNotSeen;
/// This property allows you to change the font of the story group text
@property (nonatomic, strong) UIFont * _Nonnull storyGroupTextFont;
/// This property allows you to change the number of lines of the story group text
@property (nonatomic) IBInspectable NSInteger storyGroupTextLines;
/// If any of the story group is selected as pinned group from dashboard,
/// a little star icon will appear along with the story group icon. This
/// property allows you to change the background color of this pin icon
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupPinIconColor;
/// This property allows you to change the header icon border color of the story view
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storyItemIconBorderColor;
/// This property allows you to change the header text color of the story view
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyItemTextColor;
/// This property allows you to change the font of the story view header text
@property (nonatomic, strong) UIFont * _Nonnull storyItemTextFont;
/// This function allows you to change the typeface of the font on the interactives
@property (nonatomic, strong) UIFont * _Nonnull storyInteractiveFont;
/// This property allows you to change the progress bar colors of the story view.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull storylyItemProgressBarColor;
/// This property allows you to change the size of the story group
@property (nonatomic, copy) IBInspectable NSString * _Nonnull storyGroupSize;
/// This property allows you to change the animation of the story group
@property (nonatomic, copy) IBInspectable NSString * _Nonnull storyGroupAnimation;
/// This property allows you to change height of the story group icon
/// seealso:
/// StoryGroupIconStyling
@property (nonatomic) IBInspectable CGFloat storyGroupIconHeight;
/// This property allows you to change width of the story group icon
/// seealso:
/// StoryGroupIconStyling
@property (nonatomic) IBInspectable CGFloat storyGroupIconWidth;
/// This property allows you to change corner radius value of the story group icon
/// seealso:
/// StoryGroupIconStyling
@property (nonatomic) IBInspectable CGFloat storyGroupIconCornerRadius;
/// This property allows you to change the visibility of the story group text
/// seealso:
/// StoryGroupTextStyling
@property (nonatomic) IBInspectable BOOL storyGroupTextIsVisible;
/// This property allows you to change the visibility of the story view header text
/// seealso:
/// StoryHeaderStyling
@property (nonatomic) IBInspectable BOOL storyHeaderTextIsVisible;
/// This property allows you to change the visibility of the story view header icon
/// seealso:
/// StoryHeaderStyling
@property (nonatomic) IBInspectable BOOL storyHeaderIconIsVisible;
/// This property allows you to change the visibility of the story view header close button
/// seealso:
/// StoryHeaderStyling
@property (nonatomic) IBInspectable BOOL storyHeaderCloseButtonIsVisible;
/// This property allows you to change the UIImage of the story view header close button icon
/// seealso:
/// StoryHeaderStyling
@property (nonatomic, strong) IBInspectable UIImage * _Nullable storyHeaderCloseButtonIcon;
/// This property allows you to change the UIImage of the story view header share button icon
/// seealso:
/// StoryHeaderStyling
@property (nonatomic, strong) IBInspectable UIImage * _Nullable storyHeaderShareButtonIcon;
/// This property allows you to change the orientation of story groups list
/// seealso:
/// StoryGroupListStyling
@property (nonatomic, copy) IBInspectable NSString * _Nonnull storyGroupListOrientation;
/// This property allows you to change the orientation of story groups list
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable NSInteger storyGroupListSections;
/// This property allows you to change the horizontal padding value between story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable CGFloat storyGroupListHorizontalPaddingBetweenItems;
/// This property allows you to change the vertical padding value between story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable CGFloat storyGroupListVerticalPaddingBetweenItems;
/// This property allows you to change the horizontal edge padding value of the
/// first and last story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable CGFloat storyGroupListHorizontalEdgePadding;
/// This property allows you to change the vertical edge padding value of the
/// first and last story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic) IBInspectable CGFloat storyGroupListVerticalEdgePadding;
/// This property allows you to change the shape of the story group icons,
/// their corners and the distance between each other if you set your story
/// group size as custom
/// seealso:
/// StoryGroupIconStyling
@property (nonatomic, strong) StoryGroupIconStyling * _Nonnull storyGroupIconStyling;
/// This property allows you to change the visibility of story group text
/// seealso:
/// StoryGroupTextStyling
@property (nonatomic, strong) StoryGroupTextStyling * _Nonnull storyGroupTextStyling;
/// This property allows you to change the visibility of story view header
/// icon and text.
/// seealso:
/// StoryHeaderStyling
@property (nonatomic, strong) StoryHeaderStyling * _Nonnull storyHeaderStyling;
/// This property allows you to change the distance between the
/// story groups and edge paddings of the first and last story groups
/// seealso:
/// StoryGroupListStyling
@property (nonatomic, strong) StoryGroupListStyling * _Nonnull storyGroupListStyling;
/// This property allows you to change the IVoD groups seen, unseen border
/// colors and IVoD icon color
/// seealso:
/// StoryGroupListStyling
@property (nonatomic, strong) StoryGroupIconColorStyling * _Nonnull storyGroupIconColorStyling;
/// This property allows you to change the layout direction
@property (nonatomic) enum StorylyLayoutDirection storylyLayoutDirection;
/// If any of the story group is selected as Ivod group type from dashboard,
/// a little camera will appear along with the story group icon. This
/// property allows you to change the background color of this Ivod icon
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull storyGroupIVodIconColor;
/// This property allows you to use different story groups images for different labels
@property (nonatomic, copy) IBInspectable NSString * _Nonnull storyGroupIconImageThematicLabel;
/// This property allows you to change the language shown in storyly elements.
/// Current supported langeuages are: TR, ES, RU, DE, FR, EN
@property (nonatomic, copy) IBInspectable NSString * _Nonnull languageCode;
/// This property allows you to add custom moments view to the
/// beginning of the storyly bar such as ‘add your story’ or ‘user’s own stories’
@property (nonatomic, copy) NSArray<MomentsItem *> * _Nullable momentsItems;
/// This property allows you to set moments theme to costumize moments views
@property (nonatomic, strong) StorylyMomentsTheme * _Nullable momentsTheme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class UIWindow;

@interface StorylyView (SWIFT_EXTENSION(Storyly))
/// This function allows you to load Storyly when it moves to the current window
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
@end



@interface StorylyView (SWIFT_EXTENSION(Storyly))
/// This function  allows you to refetch the data from network
/// By default you do not need to use this function.
- (void)refresh;
/// This function allows you to open using deeplink uri.
/// \param payload Intent data which includes storyly as host
///
///
/// returns:
/// Success of the operation
- (BOOL)openStoryWithPayload:(NSURL * _Nonnull)payload SWIFT_WARN_UNUSED_RESULT;
/// This function allows you to pause the current story
- (void)pause;
/// This function allows you to resume the current story
- (void)resume;
/// This function allows you to dismiss story view.
/// \param animation Dismiss animation can be customized using this parameter
///
/// \param completion Actions to do after dismiss
///
- (void)dismissWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// This function allows you to open the story view.
/// \param animation Opening animation can be customized using this parameter
///
/// \param completion Actions to do after present
///
- (void)presentWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// This function allows you to open your custom external view
/// \param externalActionView External view to show
///
- (void)showExternalActionViewWithExternalActionView:(UIView * _Nonnull)externalActionView;
/// This function dismisses your already open external view
- (void)dismissExternalActionView;
/// This function allows you to specify data of custom template groups (For Objective-C version)
/// \param externalData key/value mappings to match and fill template data
///
///
/// returns:
/// Success of the operation
- (BOOL)setExternalData:(NSArray<NSDictionary *> * _Nonnull)externalData SWIFT_WARN_UNUSED_RESULT;
@end



















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
